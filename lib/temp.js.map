{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/temp.coffee"
  ],
  "names": [],
  "mappings": "AAmFwB;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n# 'use strict'\n\n# ############################################################################################################\n# H                         = require './_helpers'\n# debug                     = console.log\n# defaults                  = { keep: false, prefix: 'guy.temp-', suffix: '', }\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @with_file = ( cfg, handler ) ->\n#   switch arity = arguments.length\n#     when 1 then [ cfg, handler, ] = [ null, cfg, ]\n#     when 2 then null\n#     else throw new Error \"expected 1 or 2 arguments, got #{arity}\"\n#   cfg   = { defaults..., cfg..., }\n#   type  = Object::toString.call handler\n#   return @_with_file_async cfg, handler if type is '[object AsyncFunction]'\n#   return @_with_file_sync  cfg, handler if type is '[object Function]'\n#   throw new Error \"^guy.temp@1^ expected an (sync or async) function, got a #{type}\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @with_directory = ( cfg, handler ) ->\n#   switch arity = arguments.length\n#     when 1 then [ cfg, handler, ] = [ null, cfg, ]\n#     when 2 then null\n#     else throw new Error \"expected 1 or 2 arguments, got #{arity}\"\n#   cfg   = { defaults..., cfg..., }\n#   type  = Object::toString.call handler\n#   return @_with_directory_async cfg, handler if type is '[object AsyncFunction]'\n#   return @_with_directory_sync  cfg, handler if type is '[object Function]'\n#   throw new Error \"^guy.temp@2^ expected an (sync or async) function, got a #{type}\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_with_file_sync = ( cfg, handler ) ->\n#   TEMP          = require 'tmp'\n#   { name: path\n#     fd\n#     removeCallback } = TEMP.fileSync cfg\n#   try handler { path, fd, } finally\n#     removeCallback() unless cfg.keep\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_with_directory_sync = ( cfg, handler ) ->\n#   FS              = require 'node:fs'\n#   TEMP            = require 'tmp'\n#   { name: path, } = TEMP.dirSync cfg\n#   try handler { path, } finally\n#     FS.rmSync path, { recursive: true, } unless cfg.keep\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_with_file_async = ( cfg, handler ) ->\n#   TEMP          = require 'tmp'\n#   { name: path\n#     fd\n#     removeCallback } = TEMP.fileSync cfg\n#   try await handler { path, fd, } finally\n#     removeCallback() unless cfg.keep\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_with_directory_async = ( cfg, handler ) ->\n#   switch arity = arguments.length\n#     when 1 then [ cfg, handler, ] = [ null, cfg, ]\n#     when 2 then null\n#     else throw new Error \"expected 1 or 2 arguments, got #{arity}\"\n#   cfg             = { defaults..., cfg..., }\n#   FS              = require 'node:fs'\n#   TEMP            = require 'tmp'\n#   { name: path, } = TEMP.dirSync cfg\n#   try await handler { path, } finally\n#     FS.rmSync path, { recursive: true, } unless cfg.keep\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @create_directory = ( cfg ) ->\n#   FS              = require 'node:fs'\n#   TEMP            = require 'tmp'\n#   cfg             = { defaults..., cfg..., }\n#   { name: path, } = TEMP.dirSync cfg\n#   rm              = -> FS.rmSync path, { recursive: true, }\n#   return { path, rm, }\n\n\n"
  ]
}