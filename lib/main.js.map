{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n_request                  = require 'request'\n_read_latest_version      = require 'latest-version'\n{ step, }                 = require 'coffeenode-suspend'\nD                         = require 'pipedreams'\n{ $, $async, }            = D\nrequire                   'pipedreams/lib/plugin-tabulate'\nmoment                    = require 'moment'\nSEMVER                    = require 'semver'\n#...........................................................................................................\nσ_module_path             = Symbol.for 'module-path'\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@_request = ( url, handler ) ->\n  _request url, ( error, response, body ) =>\n    return handler error if error?\n    switch status = response.statusCode\n      when 404\n        handler null, {}\n      when 200\n        handler null, JSON.parse body\n      else\n        return handler new Error \"#{url}\\n#{status} -- #{response.statusMessage}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_state = ( settings ) ->\n  ### TAINT use multimix for options handling ###\n  return Object.assign {}, ( require '../options' )\n\n#-----------------------------------------------------------------------------------------------------------\n@_find_max_semvers = ( semvers ) ->\n  ### choose whether you want all max major versions ###\n  #.........................................................................................................\n  max_all_semver  = null\n  max_v0_semver   = null\n  # v0_matcher      = '^0.x' # OK but not so clear; see https://github.com/npm/node-semver#caret-ranges-123-025-004\n  v0_matcher      = '>=0.0.0 <1.0.0'\n  is_semver       = ( x ) -> ( SEMVER.valid x )?\n  is_v0           = ( semver ) -> SEMVER.satisfies semver, v0_matcher\n  for semver in semvers\n    continue unless is_semver semver\n    if max_all_semver? then max_all_semver = semver if SEMVER.gt semver, max_all_semver\n    else                    max_all_semver = semver\n    if is_v0 semver\n      if max_v0_semver? then  max_v0_semver = semver if SEMVER.gt semver, max_v0_semver\n      else                    max_v0_semver = semver\n  #.........................................................................................................\n  return [ max_v0_semver, max_all_semver, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@read_latest_version = ( package_name, handler ) ->\n  ### TAINT error handling? ###\n  ( _read_latest_version package_name ).then ( version ) => handler null, version\n  return null\n\n\n#===========================================================================================================\n# TRANFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$read_package_json = ( S ) ->\n  return $ ( package_path, send ) =>\n    package_json                  = require PATH.resolve package_path, 'package.json'\n    package_json[ σ_module_path ] = package_path\n    send package_json\n\n#-----------------------------------------------------------------------------------------------------------\n@$compile_pkgnfo = ( S ) ->\n  ### `pkgnfo`: package info object ###\n  return $ ( package_json, send ) =>\n    pkgnfo = {}\n    pkgnfo[ 'path' ]                = package_json[ σ_module_path ]\n    pkgnfo[ 'name' ]                = package_json[ 'name' ]\n    pkgnfo[ 'local' ]               = { version: package_json[ 'version' ], }\n    pkgnfo[ 'dependencies' ]        = package_json[ 'dependencies' ]\n    #.......................................................................................................\n    if package_json[ 'devDependencies' ]?\n      for dependency_name, semver_term of package_json[ 'devDependencies' ]\n        pkgnfo[ 'dependencies' ][ dependency_name ] = semver_term\n    #.......................................................................................................\n    send pkgnfo\n\n#-----------------------------------------------------------------------------------------------------------\n@$read_npm = ( S ) ->\n  version_cache = {}\n  return $async ( pkgnfo, send, end ) =>\n    #.......................................................................................................\n    if pkgnfo?\n      pkgnfo[ 'npm' ]                       = {}\n      pkgnfo[ 'npm' ][ 'date-by-versions' ] = date_by_versions = {}\n      package_name                          = pkgnfo[ 'name' ]\n      url                                   = \"http://registry.npmjs.org/#{package_name}\"\n      self                                  = @\n      #.....................................................................................................\n      step ( resume ) ->\n        npm_info = yield self._request url, resume\n        # debug '33372', npm_info[ 'time' ]\n        if npm_info[ 'time' ]?\n          for npm_version, date_txt of npm_info[ 'time' ]\n            ### choose local or universal time ###\n            date_by_versions[ npm_version ] = moment date_txt\n            # date_by_versions[ npm_version ] = moment.utc date_txt\n        for dependency_name, version of pkgnfo[ 'dependencies' ]\n          unless ( latest_version = version_cache[ dependency_name ] )?\n            latest_version                    = yield self.read_latest_version dependency_name, resume\n            version_cache[ dependency_name ]  = latest_version\n          # debug '88721', package_name, dependency_name, version, latest_version\n          ### TAINT shouldn't modify struture, just add data ###\n          ### TAINT naming: version, latest_version? ###\n          ### TAINT what is called 'version' here is really a version range like '^3.4.5' ###\n          pkgnfo[ 'dependencies' ][ dependency_name ] = { version, latest_version, }\n        send.done pkgnfo\n        return null\n    #.......................................................................................................\n    if end?\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$identify_interesting_versions = ( S ) ->\n  return $ ( pkgnfo ) =>\n    pkgnfo[ 'interesting-versions' ] = target = []\n    target.push 'created'\n    target.push 'modified'\n    for version in @_find_max_semvers Object.keys pkgnfo[ 'npm' ][ 'date-by-versions' ]\n      target.push version\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_table = ( S ) ->\n  # column_count = 2\n  # if ( console_width = process.stdout.columns )\n  #   width = console_width - column_count * 4 - 1\n  # else\n  #   width = 108\n  table_settings =\n    headings:       [ 'package', 'dependency', 'local', 'npm', 'date', ]\n    alignment:      'left'\n    widths:         [ 30, 30, 12, 12, 25, ]\n    # alignments:     [ null, null, 'left', ]\n  #.........................................................................................................\n  $cast = =>\n    return $ ( pkgnfo, send ) =>\n      # debug '99928', pkgnfo\n      local_version     = pkgnfo[ 'local' ][ 'version'          ]\n      date_by_versions  = pkgnfo[ 'npm'   ][ 'date-by-versions' ]\n      package_name      = pkgnfo[ 'name' ]\n      name_display      = pkgnfo[ 'name' ]\n      line_count        = 0\n      #.....................................................................................................\n      for npm_version, date of date_by_versions\n        continue unless npm_version in pkgnfo[ 'interesting-versions' ]\n        line_count += +1\n        date_txt    = ( date.format 'YYYY MM DD' ) + \" (#{date.fromNow()})\"\n        send [ package_name, '', local_version, npm_version, date_txt, ]\n      if line_count < 1\n        send [ package_name, '', local_version, '-/-', '-/-', ]\n      #.....................................................................................................\n      for name, { version, latest_version, } of pkgnfo[ 'dependencies' ]\n        send [ package_name, name, version, latest_version, '', ]\n  #.........................................................................................................\n  $colorize = =>\n    prv_package_name = null\n    return $ ( row, send ) =>\n      # row[ 'date' ] = CND.yellow  row[ 'date' ]\n      # row[ 'size' ] = CND.steel   row[ 'size' ]\n      # row[ 'name' ] = CND.lime    row[ 'name' ]\n      [ package_name, dependency_name, version, latest_version, date, ] = row\n      if prv_package_name isnt package_name\n        send [ '────────────────────', '────────────────────', '──────', '──────', '──────', ] if package_name?\n        prv_package_name = package_name\n      color = null\n      if dependency_name? and dependency_name.length > 0\n        if version? and version.length > 0\n          if latest_version? and latest_version.length > 0\n            # clean_version = SEMVER.clean version\n            clean_version = version.replace /[^.0-9]/g, ''\n            # debug '88873',  [ version, latest_version, clean_version]\n            try\n              diff = SEMVER.diff clean_version, latest_version\n            catch error\n              diff ?= 'N/A'\n            diff ?= 'ok'\n            color = CND.grey\n            switch diff\n              when 'major'  then color = CND.red\n              when 'minor'  then color = CND.lime\n              when 'patch'  then color = CND.yellow\n            # debug '55222', [ version, latest_version, color diff, ]\n      if color?\n        send [ package_name, dependency_name, version, ( color latest_version ), date, ]\n      else\n        send row\n  #.........................................................................................................\n  $show = =>\n    return $ ( row ) => echo row\n  #.........................................................................................................\n  return D.new_stream pipeline: [\n    $cast()\n    $colorize()\n    ( D.$tabulate table_settings )\n    $show()\n    ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@f = ( handler ) ->\n  S     = @_new_state()\n  input = D.new_stream()\n  #.........................................................................................................\n  input\n    .pipe @$read_package_json               S\n    .pipe @$compile_pkgnfo                  S\n    .pipe @$read_npm                        S\n    .pipe @$identify_interesting_versions   S\n    .pipe @$as_table                        S\n    .pipe $ 'finish', -> handler()\n  #.........................................................................................................\n  package_paths = [\n    # 'io/guy-test'\n    # 'io/guy'\n    # 'io/cnd'\n    # 'io/kleinbild'\n    'io/jizura-datasources'\n    # 'io-b/coffeenode-chr'\n    # 'io/multimix'\n    # 'io/ncr'\n    # 'io/pipedreams'\n    # 'io/interskiplist'\n    # 'io/mingkwai-ncr'\n    # 'io/mingkwai-rack'\n    # 'io/mingkwai-typesetter'\n    # 'io/mingkwai-typesetter-jizura'\n    'io/hollerith'\n    'io/hollerith-codec'\n    # 'io/jizura-db-feeder'\n    ]\n  for package_path in package_paths\n    package_locator = PATH.resolve __dirname, '../../..', package_path\n    D.send input, package_locator\n  D.end input\n  #.........................................................................................................\n  return null\n\n\n# ############################################################################################################\n# unless module.parent?\n#   @f()\n\n\n\n\n"
  ]
}