{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sets.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA;;;EAGA,CAAA,GAA4B,OAAA,CAAQ,YAAR,EAH5B;;;;EASA,IAAC,CAAA,KAAD,GAAc,QAAA,CAAA,GAAE,CAAF,CAAA;AAAW,QAAA;WAAC,IAAI,GAAJ,CAAQ;;AAAE;MAAA,KAAA,mCAAA;;qBAAA,CAAE,GAAA,CAAF;MAAA,CAAA;;QAAF,CAAwB,CAAC,IAAzB,CAAA,CAAR;EAAZ;;EACd,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;WAAY,IAAI,GAAJ,CAAQ,CAAE,KAAK,CAAC,IAAN,CAAW,CAAX,CAAF,CAAgB,CAAC,MAAjB,CAAwB,CAAE,CAAF,CAAA,GAAA;aAAS,CAAC,CAAC,GAAF,CAAM,CAAN;IAAT,CAAxB,CAAR;EAAZ,EAVd;;;EAaA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAA,GAAE,CAAF,CAAA;AACb,QAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA;IAAE,MAAO,CAAE,KAAA,GAAQ,CAAC,CAAC,MAAZ,CAAA,IAAwB,EAA/B;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,0DAAA,CAAA,CAA6D,KAA7D,CAAA,CAAV,EADR;;IAEA,CAAA,GAAI,CAAC,CAAE,CAAF;IACL,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAjB,CAAqB,CAArB;IACA,KAAW,oFAAX;MACE,CAAA,GAAI,CAAC,CAAE,GAAF;MACL,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAjB,CAAqB,CAArB;MACA,CAAA,GAAI,IAAC,CAAA,UAAD,CAAY,CAAZ,EAAe,CAAf;MACJ,IAAY,CAAC,CAAC,IAAF,KAAU,CAAtB;AAAA,eAAO,EAAP;;IAJF;AAKA,WAAO;EAVI,EAbb;;;EA0BA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;WAAY,IAAI,GAAJ,CAAQ,CAAE,KAAK,CAAC,IAAN,CAAW,CAAX,CAAF,CAAgB,CAAC,MAAjB,CAAwB,CAAE,CAAF,CAAA,GAAA;aAAS,CAAI,CAAC,CAAC,GAAF,CAAM,CAAN;IAAb,CAAxB,CAAR;EAAZ;AA1BZ",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './_helpers'\n\n\n### thx to https://exploringjs.com/impatient-js/ch_sets.html#missing-set-operations ###\n\n#-----------------------------------------------------------------------------------------------------------\n@unite      = ( P... ) -> new Set ( [ p..., ] for p in P ).flat()\n@_intersect = ( a, b ) -> new Set ( Array.from a ).filter ( x ) => b.has x\n\n#-----------------------------------------------------------------------------------------------------------\n@intersect = ( P... ) ->\n  unless ( arity = P.length ) >= 2\n    throw new Error \"^guy.sets.intersect@1^ expected at least 2 arguments, got #{arity}\"\n  R = P[ 0 ]\n  H.types.validate.set R\n  for idx in [ 1 ... arity ]\n    p = P[ idx ]\n    H.types.validate.set p\n    R = @_intersect R, p\n    return R if R.size is 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@subtract = ( a, b ) -> new Set ( Array.from a ).filter ( x ) => not b.has x\n"
  ]
}