{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/datetime.coffee"
  ],
  "names": [],
  "mappings": "AA2EyD;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n# 'use strict'\n\n\n# ############################################################################################################\n# ### https://day.js.org ###\n# H                                   = require './_helpers'\n# @_dayjs                             = require 'dayjs'\n# @_timestamp_input_template          = 'YYYYMMDD-HHmmssZ'\n# @_timestamp_output_template         = 'YYYYMMDD-HHmmss[Z]'\n# defaults                            = {}\n\n# #===========================================================================================================\n# do =>\n#   utc               = require 'dayjs/plugin/utc';               @_dayjs.extend utc\n#   relativeTime      = require 'dayjs/plugin/relativeTime';      @_dayjs.extend relativeTime\n#   toObject          = require 'dayjs/plugin/toObject';          @_dayjs.extend toObject\n#   customParseFormat = require 'dayjs/plugin/customParseFormat'; @_dayjs.extend customParseFormat\n#   duration          = require 'dayjs/plugin/duration';          @_dayjs.extend duration\n\n# #===========================================================================================================\n# H.types.declare 'guy_dt_valid_dayjs', tests:\n#   \"( @type_of x ) is 'm'\":  ( x ) -> ( @type_of x ) is 'm'\n#   \"@isa.float x.$y\":        ( x ) -> @isa.float x.$y\n#   \"@isa.float x.$M\":        ( x ) -> @isa.float x.$M\n#   \"@isa.float x.$D\":        ( x ) -> @isa.float x.$D\n#   \"@isa.float x.$W\":        ( x ) -> @isa.float x.$W\n#   \"@isa.float x.$H\":        ( x ) -> @isa.float x.$H\n#   \"@isa.float x.$m\":        ( x ) -> @isa.float x.$m\n#   \"@isa.float x.$s\":        ( x ) -> @isa.float x.$s\n#   \"@isa.float x.$ms\":       ( x ) -> @isa.float x.$ms\n\n# #-----------------------------------------------------------------------------------------------------------\n# H.types.declare 'guy_dt_timestamp', tests:\n#   \"@isa.text x\":                    ( x ) -> @isa.text x\n#   \"( /^\\\\d{8}-\\\\d{6}Z$/ ).test x\":  ( x ) -> ( /^\\d{8}-\\d{6}Z$/ ).test x\n\n# #-----------------------------------------------------------------------------------------------------------\n# H.types.declare 'guy_dt_now_cfg', tests:\n#   \"@isa.object x\":                    ( x ) -> @isa.object x\n# defaults.guy_dt_now_cfg =\n#     subtract:       null\n#     add:            null\n\n\n# #===========================================================================================================\n# # DATETIME\n# #-----------------------------------------------------------------------------------------------------------\n# @from_now = ( srts ) ->\n#   return ( @parse srts ).fromNow()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @now = ( cfg ) ->\n#   H.types.validate.guy_dt_now_cfg ( cfg = { defaults.guy_dt_now_cfg..., cfg..., } )\n#   R = @_dayjs().utc()\n#   R = R.subtract cfg.subtract...  if cfg.subtract?\n#   R = R.add      cfg.add...       if cfg.add?\n#   return R.format @_timestamp_output_template\n\n# #-----------------------------------------------------------------------------------------------------------\n# @srts_from_isots = ( isots ) -> ( @_dayjs isots ).utc().format @_timestamp_output_template\n\n# #-----------------------------------------------------------------------------------------------------------\n# @parse = ( srts ) ->\n#   H.types.validate.guy_dt_timestamp srts\n#   R = ( @_dayjs srts, @_timestamp_input_template ).utc()\n#   throw new Error \"^guy.datetime.dt_parse@1^ #{rpr srts}\" unless H.types.isa.guy_dt_valid_dayjs R\n#   return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @format = ( srts, P... ) ->\n#   R = @parse srts\n#   return R.format P...\n\n# #-----------------------------------------------------------------------------------------------------------\n# @isots_from_srts = ( srts ) -> ( @parse srts ).format()\n\n\n\n"
  ]
}