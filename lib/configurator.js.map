{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/configurator.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,MAAA,EAAA;;EAEA,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B,EAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgFA,IAAC,CAAA,oBAAD,GAAwB,CAAE,QAAF,EAAY,GAAZ,EAAiB,QAAQ,IAAzB,CAAA,GAAA,EAAA;;;;;;AACxB,QAAA,QAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAKE,CAAA,CAAE,KAAF,CAAA,GAAgB,OAAA,CAAQ,IAAR,CAAhB;IACA,QAAA,6IAAoE,CAAA;IACpE,QAAQ,CAAC,GAAT,GAAgB,MAAA,CAAO,CAAE,GAAA,QAAF,EAAe,GAAA,GAAf,CAAP;;MAChB,QAAgB,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;IAChB,KAAK,CAAC,GAAN,CAAU,QAAV,EAAoB,OAApB,EAA6B;MAAE,UAAA,EAAY,KAAd;MAAqB,KAAA,EAAO;IAA5B,CAA7B;IACA,IAA+C,0CAA/C;MAAA,QAAQ,CAAC,WAAW,CAAC,aAArB,CAAmC,QAAnC,EAAA;;AACA,WAAO;EAZe;;EAhFxB;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n{ lets\n  freeze }                = require 'letsfreezethat'\n\n# #===========================================================================================================\n# #\n# #-----------------------------------------------------------------------------------------------------------\n# class Configurator\n\n#   #---------------------------------------------------------------------------------------------------------\n#   ### Constants are a class property so we can access them without having an instance: ###\n#   @C: freeze { defaults: {}, }\n#     # u32_sign_delta:   0x80000000\n#     # u32_width:        4\n#     # u32_nr_min:       -0x80000000\n#     # u32_nr_max:       +0x7fffffff\n#     # #.......................................................................................................\n#     # defaults:\n#     #   constructor_cfg:\n#     #     vnr_width:    5           ### maximum elements in VNR vector ###\n#     #     validate:     false\n#     #     # autoextend: false\n#     #     format:       'u32'\n\n#   #---------------------------------------------------------------------------------------------------------\n#   @get_types_instance: -> new ( require 'intertype' ).Intertype()\n\n#   #---------------------------------------------------------------------------------------------------------\n#   @create_types: ( instance, cfg, types = null ) ->\n#     types ?= @get_types_instance()\n#     #.......................................................................................................\n#     ### declare the `cfg` type for the constructor configuration and immediately put it to use: ###\n#     types.declare 'constructor_cfg', tests:\n#       \"x is a object\":                    ( x ) -> @isa.object x\n#       # \"@isa.cardinal x.vnr_width\":        ( x ) -> @isa.cardinal x.vnr_width\n#       # \"@isa.boolean x.validate\":          ( x ) -> @isa.boolean x.validate\n#       # \"x.format in [ 'u32', 'bcd', ]\":    ( x ) -> x.format in [ 'u32', 'bcd', ]\n#     types.validate.constructor_cfg instance.cfg\n#     #.......................................................................................................\n#     ### declare other types as needed: ###\n#     # types.declare 'hlr_vnr', ...\n#     #.......................................................................................................\n#     ### return the `Intertype` instance which will become an instance property: ###\n#     return types\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( cfg ) ->\n#     ### derive effective `cfg` from defaults and argument, make it an instance property, then instantiate\n#     `types` and make it an instance property as well. This will fail if `cfg` should not validate. We\n#     are free to declare types in `create_types()` that are parametrized from consumer-provided or default\n#     configuration properties. Freeze `cfg` b/c we won't support live `cfg` changes (can still use `lets`\n#     tho where called for) ###\n#     { props, }  = require '..'\n#     @cfg        = freeze { @constructor.C.defaults.constructor_cfg..., cfg..., }\n#     props.def @, 'types', { enumerable: false, value: ( @constructor.create_types @ ), }\n#     return undefined\n\n# Sample usage\n#\n# #-----------------------------------------------------------------------------------------------------------\n# class @Hollerith extends _Hollerith_proto\n#\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( cfg ) ->\n#     super cfg\n#     ### 'compile' (i.e. choose) method into instance to eschew run-time switches: ###\n#     @encode = switch @cfg.format\n#       when 'u32' then @_encode_u32\n#       when 'bcd' then @_encode_bcd\n#     return undefined\n#\n# ### make constants a module-global for faster, easier access: ###\n# C           = _Hollerith_proto.C\n# ### Export class, this allows consumers to instantiate with custom properties: ###\n# @Hollerith  = freeze @Hollerith\n# ### Export all-uppercase (== stateless) instance with default `cfg` for wash-n-go usage: ###\n# @HOLLERITH  = new @Hollerith()\n\n#-----------------------------------------------------------------------------------------------------------\n@configure_with_types = ( instance, cfg, types = null ) =>\n  ### derive effective `cfg` from defaults and argument, make it an instance property, then instantiate\n  `types` and make it an instance property as well. This will fail if `cfg` should not validate. We\n  are free to declare types in `create_types()` that are parametrized from consumer-provided or default\n  configuration properties. Freeze `cfg` b/c we won't support live `cfg` changes (can still use `lets`\n  tho where called for) ###\n  { props, }    = require '..'\n  defaults      = instance.constructor.C?.defaults?.constructor_cfg ? {}\n  instance.cfg  = freeze { defaults..., cfg..., }\n  types        ?= new ( require 'intertype' ).Intertype()\n  props.def instance, 'types', { enumerable: false, value: types, }\n  instance.constructor.declare_types instance if instance.constructor.declare_types?\n  return undefined\n\n\n#===========================================================================================================\n# module.exports = Configurator\n\n"
  ]
}