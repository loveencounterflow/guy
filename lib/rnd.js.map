{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/rnd.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n#===========================================================================================================\n# UNSORTING\n#-----------------------------------------------------------------------------------------------------------\n@shuffle = ( list, ratio = 1 ) ->\n  ### Shuffles the elements of a list randomly. After the call, the elements of will be—most of the time—\n  be reordered (but this is not guaranteed, as there is a realistic probability for recurrence of orderings\n  with short lists).\n\n  This is an implementation of the renowned Fisher-Yates algorithm, but with a twist: You may pass in a\n  `ratio` as second argument (which should be a float in the range `0 <= ratio <= 1`); if set to a value\n  less than one, a random number will be used to decide whether or not to perform a given step in the\n  shuffling process, so lists shuffled with zero-ish ratios will show less disorder than lists shuffled with\n  a one-ish ratio.\n\n  Implementation gleaned from http://stackoverflow.com/a/962890/256361. ###\n  #.........................................................................................................\n  return list if ( this_idx = list.length ) < 2\n  return @_shuffle list, ratio, Math.random, @random_integer.bind @\n\n#-----------------------------------------------------------------------------------------------------------\n@get_shuffle = ( seed_0 = 0, seed_1 = 1 ) ->\n  ### This method works similar to `get_rnd`; it accepts two `seed`s which are used to produce random number\n  generators and returns a predictable shuffling function that accepts arguments like Bits'N'Pieces\n  `shuffle`. ###\n  rnd             = @get_rnd      seed_0\n  random_integer  = @get_rnd_int  seed_1\n  return ( list, ratio = 1 ) => @_shuffle list, ratio, rnd, random_integer\n\n#-----------------------------------------------------------------------------------------------------------\n@_shuffle = ( list, ratio, rnd, random_integer ) ->\n  #.........................................................................................................\n  return list if ( this_idx = list.length ) < 2\n  #.........................................................................................................\n  loop\n    this_idx += -1\n    return list if this_idx < 1\n    if ratio >= 1 or rnd() <= ratio\n      # return list if this_idx < 1\n      that_idx = random_integer 0, this_idx\n      [ list[ that_idx ], list[ this_idx ] ] = [ list[ this_idx ], list[ that_idx ] ]\n  #.........................................................................................................\n  return list\n\n\n\n#===========================================================================================================\n# RANDOM NUMBERS\n#-----------------------------------------------------------------------------------------------------------\n# ### see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number ###\n# @MIN_SAFE_INTEGER = -( 2 ** 53 ) - 1\n# @MAX_SAFE_INTEGER = +( 2 ** 53 ) - 1\n\n#-----------------------------------------------------------------------------------------------------------\n@random_number = ( min = 0, max = 1 ) ->\n  ### Return a random number between min (inclusive) and max (exclusive).\n  From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n  via http://stackoverflow.com/a/1527820/256361. ###\n  return Math.random() * ( max - min ) + min\n\n#-----------------------------------------------------------------------------------------------------------\n@integer_from_normal_float = ( x, min = 0, max = 2 ) ->\n  ### Given a 'normal' float `x` so that `0 <= x < 1`, return an integer `n` so that `min <= n < min`. ###\n  return ( Math.floor x * ( max - min ) ) + min\n\n#-----------------------------------------------------------------------------------------------------------\n@random_integer = ( min = 0, max = 2 ) ->\n  ### Return a random integer between min (inclusive) and max (exclusive).\n  From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n  via http://stackoverflow.com/a/1527820/256361. ###\n  return @integer_from_normal_float Math.random(), min, max\n\n#-----------------------------------------------------------------------------------------------------------\n@get_rnd_int = ( seed = 1, delta = 1 ) ->\n  ### Like `get_rnd`, but returns a predictable random integer generator. ###\n  rnd = @get_rnd seed, delta\n  return ( min = 0, max = 1 ) => @integer_from_normal_float rnd(), min, max\n\n#-----------------------------------------------------------------------------------------------------------\n@get_rnd = ( seed = 1, delta = 1 ) ->\n  ### This method returns a simple deterministic pseudo-random number generator—basically like\n  `Math.random`, but (1) very probably with a much worse distribution of results, and (2) with predictable\n  series of numbers, which is good for some testing scenarios. You may seed this method by passing in a\n  `seed` and a `delta`, both of which must be non-zero numbers; the ensuing series of calls to the returned\n  method will then always result in the same series of numbers. Here is a usage example that also shows how\n  to reset the generator:\n\n      CND = require 'cnd'\n      rnd = CND.get_rnd() # or, say, `rnd = CND.get_rnd 123, 0.5`\n      log rnd() for idx in [ 0 .. 5 ]\n      log()\n      rnd.reset()\n      log rnd() for idx in [ 0 .. 5 ]\n\n  Please note that there are no strong guarantees made about the quality of the generated values except the\n  (1) deterministic repeatability, (2) boundedness, and (3) 'apparent randomness'. Do **not** use this for\n  cryptographic purposes. ###\n  #.........................................................................................................\n  R = ->\n    R._idx  += 1\n    x       = ( Math.sin R._s ) * 10000\n    R._s    += R._delta\n    return x - Math.floor x\n  #.........................................................................................................\n  R.reset = ( seed, delta ) ->\n    ### Reset the generator. After calling `rnd.reset` (or `rnd.seed` with the same arguments), ensuing calls\n    to `rnd` will always result in the same sequence of pseudo-random numbers. ###\n    seed   ?= @._seed\n    delta  ?= @._delta\n    #.......................................................................................................\n    unless ( typeof seed  ) is 'number' and ( Number.isFinite seed  ) then throw new Error \"^3397^ expected a number, got #{rpr seed}\"\n    unless ( typeof delta ) is 'number' and ( Number.isFinite delta ) then throw new Error \"^3398^ expected a number, got #{rpr delta}\"\n    #.......................................................................................................\n    throw new Error \"seed should not be zero\"  unless seed  != 0\n    throw new Error \"delta should not be zero\" unless delta != 0\n    #.......................................................................................................\n    R._s     = seed\n    R._seed  = seed\n    R._delta = delta\n    R._idx   = -1\n    return null\n  #.........................................................................................................\n  R.reset seed, delta\n  #.........................................................................................................\n  return R\n\n"
  ]
}