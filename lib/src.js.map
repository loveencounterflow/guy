{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/src.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n# @PARSER                   = require 'acorn-loose'\n@STRICT_PARSER            = require 'acorn'\n@LOOSE_PARSER             = require 'acorn-loose'\n@AST_walk                 = require 'acorn-walk'\n@ASTRING                  = require 'astring'\ntypes                     = new ( require 'intertype' ).Intertype()\ntypes.defaults            = {}\nmisfit                    = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'guy_src_parse_use', tests:\n  \"x in [ 'strict', 'loose', 'strict,loose', ]\": ( x ) -> x in [ 'strict', 'loose', 'strict,loose', ]\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'guy_src_parse_cfg', tests:\n  \"@isa.object x\":                          ( x ) -> @isa.object x\n  \"@isa_optional.text x.text\":              ( x ) -> @isa_optional.text x.text\n  \"@isa.guy_src_parse_use x.use\":           ( x ) -> @isa.guy_src_parse_use x.use\n  \"@isa_optional.callable x.function\":      ( x ) -> @isa_optional.callable x.function\n  \"must have either x.text or x.function\":  ( x ) ->\n    return ( x.text? and not x.function? ) or ( x.function? and not x.text? )\ntypes.defaults.guy_src_parse_cfg =\n  text:         null\n  function:     null\n  fallback:     misfit\n  use:          'strict,loose'\n  ecmaVersion:  'latest'\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( cfg ) =>\n  types.validate.guy_src_parse_cfg cfg = { types.defaults.guy_src_parse_cfg..., cfg..., }\n  text          = if cfg.function? then cfg.function.toString() else cfg.text\n  { use\n    fallback  } = cfg\n  delete cfg.fallback\n  delete cfg.function\n  delete cfg.text\n  delete cfg.use\n  try\n    switch use\n      when 'strict'       then return @STRICT_PARSER.parse  text, cfg\n      when 'loose'        then return @LOOSE_PARSER.parse   text, cfg\n      when 'strict,loose'\n        try return @STRICT_PARSER.parse text, cfg catch _\n        return @LOOSE_PARSER.parse text, cfg\n  catch error\n    throw error if fallback is misfit\n  return fallback\n\n#-----------------------------------------------------------------------------------------------------------\n@_generate = ( P... ) => @ASTRING.generate P...\n\n#-----------------------------------------------------------------------------------------------------------\n@slug_node_from_simple_function = ( cfg ) =>\n  collector =\n    rtn:    []\n    blk:    []\n  ast       = @parse cfg\n  @AST_walk.simple ast,\n    ReturnStatement:      ( node ) -> collector.rtn.push node\n    BlockStatement:       ( node ) -> collector.blk.push node\n  R = null\n  if collector.rtn.length is 1 then return collector.rtn.at 0\n  if collector.blk.length >  0 then return collector.blk.at -1\n  debug '^24243^', cfg\n  return cfg.fallback unless cfg.fallback is misfit\n  throw new Error \"^guy.props.src@1^ unable to parse input\"\n\n#-----------------------------------------------------------------------------------------------------------\n@slug_from_simple_function = ( cfg ) =>\n  ast = @slug_node_from_simple_function cfg\n  switch ast.type\n    when 'ReturnStatement'\n      R = GUY.src._generate ast\n      R = R.trim().replace /\\s*\\n\\s*/g, ' '\n      R = R.replace /^return\\s*/, ''\n      R = R.replace /;$/, ''\n    when 'BlockStatement'\n      R = GUY.src._generate ast\n      R = R.trim().replace /\\s*\\n\\s*/g, ' '\n      R = R.replace /^\\{\\s*(.*?)\\s*\\}$/, '$1'\n    else\n      throw new Error \"^guy.props.src@1^ unable to parse input\"\n  return R\n\n\n\n"
  ]
}