{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/src.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA;;EAEA,IAAC,CAAA,MAAD,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,IAAC,CAAA,OAAD,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,KAAK,CAAC,QAAN,GAA4B,CAAA,EAL5B;;;EAQA,KAAK,CAAC,OAAN,CAAc,mBAAd,EAAmC;IAAA,KAAA,EACjC;MAAA,eAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA1C;MACA,2BAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,IAAd,CAAmB,CAAC,CAAC,IAArB;MAAT,CAD1C;MAEA,mCAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,QAAd,CAAuB,CAAC,CAAC,QAAzB;MAAT,CAF1C;MAGA,uCAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;AACxC,eAAO,CAAE,gBAAA,IAAgB,oBAAlB,CAAA,IAAmC,CAAE,oBAAA,IAAoB,gBAAtB;MADF;IAH1C;EADiC,CAAnC;;EAMA,KAAK,CAAC,QAAQ,CAAC,iBAAf,GACE;IAAA,IAAA,EAAc,IAAd;IACA,QAAA,EAAc,IADd;IAEA,WAAA,EAAc;EAFd,EAfF;;;EAoBA,IAAC,CAAA,KAAD,GAAS,CAAE,GAAF,CAAA,GAAA;AACT,QAAA;IAAE,GAAA,GAAQ,CAAE,GAAA,KAAK,CAAC,QAAQ,CAAC,iBAAjB,EAAuC,GAAA,GAAvC;IACR,KAAK,CAAC,QAAQ,CAAC,iBAAf,CAAiC,GAAjC;IACA,IAAA,GAAW,oBAAH,GAAsB,GAAG,CAAC,QAAQ,CAAC,QAAb,CAAA,CAAtB,GAAmD,GAAG,CAAC;IAC/D,OAAO,GAAG,CAAC;IACX,OAAO,GAAG,CAAC;AACX,WAAO,IAAC,CAAA,MAAM,CAAC,KAAR,CAAc,IAAd,EAAoB,GAApB;EANA,EApBT;;;EA6BA,IAAC,CAAA,4BAAD,GAAgC,CAAE,QAAF,CAAA,GAAA;IAC9B,KAAK,CAAC,QAAQ,CAAC,QAAf,CAAwB,QAAxB;WACA,IAAC,CAAA,6BAAD,CAA+B,IAAC,CAAA,KAAD,CAAO;MAAA,QAAA,EAAU;IAAV,CAAP,CAA/B;EAF8B,EA7BhC;;;EAkCA,IAAC,CAAA,6BAAD,GAAiC,CAAE,GAAF,CAAA,GAAA;AACjC,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAE,IAAkD,KAAK,CAAC,GAAG,CAAC,MAAV,CAAiB,GAAjB,CAAlD;AAAA,aAAO,IAAC,CAAA,6BAAD,CAA+B,GAAG,CAAC,IAAnC,EAAP;;IACA,KAAA,qCAAA;;MACE,IAAG,IAAI,CAAC,IAAL,KAAa,iBAAhB;AACE,eAAO,KADT;OAAA,MAAA;QAGE,IAAY,sDAAZ;AAAA,iBAAO,EAAP;SAHF;;IADF;AAKA,WAAO;EAPwB,EAlCjC;;;EA4CA,IAAC,CAAA,4BAAD,GAAgC,CAAE,QAAF,CAAA,GAAA;WAC9B,IAAC,CAAA,OAAO,CAAC,QAAT,CAAkB,IAAC,CAAA,4BAAD,CAA8B,QAA9B,CAAlB;EAD8B;;EA5ChC;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n@PARSER                   = require 'acorn-loose'\n@ASTRING                  = require 'astring'\ntypes                     = new ( require 'intertype' ).Intertype()\ntypes.defaults            = {}\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'guy_src_parse_cfg', tests:\n  \"@isa.object x\":                          ( x ) -> @isa.object x\n  \"@isa_optional.text x.text\":              ( x ) -> @isa_optional.text x.text\n  \"@isa_optional.callable x.function\":      ( x ) -> @isa_optional.callable x.function\n  \"must have either x.text or x.function\":  ( x ) ->\n    return ( x.text? and not x.function? ) or ( x.function? and not x.text? )\ntypes.defaults.guy_src_parse_cfg =\n  text:         null\n  function:     null\n  ecmaVersion:  '2022'\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( cfg ) =>\n  cfg   = { types.defaults.guy_src_parse_cfg..., cfg..., }\n  types.validate.guy_src_parse_cfg cfg\n  text  = if cfg.function? then cfg.function.toString() else cfg.text\n  delete cfg.function\n  delete cfg.text\n  return @PARSER.parse text, cfg\n\n#-----------------------------------------------------------------------------------------------------------\n@get_first_return_clause_node = ( callable ) =>\n  types.validate.callable callable\n  @_get_first_return_clause_node @parse function: callable\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_first_return_clause_node = ( ast ) =>\n  return @_get_first_return_clause_node ast.body if types.isa.object ast\n  for node in ast\n    if node.type is 'ReturnStatement'\n      return node\n    else\n      return R if ( R = @_get_first_return_clause_node node )?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_first_return_clause_text = ( callable ) =>\n  @ASTRING.generate @get_first_return_clause_node callable\n\n  # debug parser.parse ( ( x ) -> @isa.foo x ).toString(), { ecmaVersion: '2022', }\n  # urge generate { type: 'Program', start: 0, end: 49, body: [ { type: 'FunctionDeclaration', start: 0, end: 49, id: { type: 'Identifier', start: 8, end: 8, name: 'âœ–' }, params: [ { type: 'Identifier', start: 9, end: 10, name: 'x' } ], generator: false, expression: false, async: false, body: { type: 'BlockStatement', start: 12, end: 49, body: [ { type: 'ReturnStatement', start: 20, end: 43, argument: { type: 'CallExpression', start: 27, end: 42, callee: { type: 'MemberExpression', start: 27, end: 39, object: { type: 'MemberExpression', start: 27, end: 35, object: { type: 'ThisExpression', start: 27, end: 31 }, property: { type: 'Identifier', start: 32, end: 35, name: 'isa' }, computed: false, optional: false }, property: { type: 'Identifier', start: 36, end: 39, name: 'foo' }, computed: false, optional: false }, arguments: [ { type: 'Identifier', start: 40, end: 41, name: 'x' } ], optional: false } } ] } } ], sourceType: 'script' }\n  # urge generate { type: 'BlockStatement', start: 12, end: 49, body: [ { type: 'ReturnStatement', start: 20, end: 43, argument: { type: 'CallExpression', start: 27, end: 42, callee: { type: 'MemberExpression', start: 27, end: 39, object: { type: 'MemberExpression', start: 27, end: 35, object: { type: 'ThisExpression', start: 27, end: 31 }, property: { type: 'Identifier', start: 32, end: 35, name: 'isa' }, computed: false, optional: false }, property: { type: 'Identifier', start: 36, end: 39, name: 'foo' }, computed: false, optional: false }, arguments: [ { type: 'Identifier', start: 40, end: 41, name: 'x' } ], optional: false } } ] }\n  # urge generate { type: 'ReturnStatement', start: 20, end: 43, argument: { type: 'CallExpression', start: 27, end: 42, callee: { type: 'MemberExpression', start: 27, end: 39, object: { type: 'MemberExpression', start: 27, end: 35, object: { type: 'ThisExpression', start: 27, end: 31 }, property: { type: 'Identifier', start: 32, end: 35, name: 'isa' }, computed: false, optional: false }, property: { type: 'Identifier', start: 36, end: 39, name: 'foo' }, computed: false, optional: false }, arguments: [ { type: 'Identifier', start: 40, end: 41, name: 'x' } ], optional: false } }\n\n\n\n"
  ]
}