{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/watch.coffee"
  ],
  "names": [],
  "mappings": "AA0FyF;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n\n# 'use strict'\n\n# ############################################################################################################\n# H                         = require './_helpers'\n# debug                     = console.log\n# { FSWatcher }             = require 'chokidar'\n# { rpr }                   = H\n# FS                        = require 'fs'\n\n# #-----------------------------------------------------------------------------------------------------------\n# path_exists = ( path ) ->\n#   H.types.validate.nonempty_text path\n#   try FS.statSync path catch error\n#     return false if error.code is 'ENOENT'\n#     throw error\n#   return true\n\n\n# #===========================================================================================================\n# class @Watcher\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( cfg = null ) ->\n#     ### TAINT use InterType ###\n#     defaults  =\n#       recursive:        true\n#       persistent:       true\n#       awaitWriteFinish: { stabilityThreshold: 100, }\n#     cfg       = { defaults...,  cfg..., }\n#     @_watcher = new FSWatcher cfg\n#     @_attach_handlers()\n#     return undefined\n\n#   #---------------------------------------------------------------------------------------------------------\n#   stop: -> await @_watcher.close()\n\n#   #---------------------------------------------------------------------------------------------------------\n#   _attach_handlers: ->\n#     #.......................................................................................................\n#     @_watcher.on 'add',       ( ( path, stats   ) => @on_add            path  ) if @on_add?\n#     @_watcher.on 'change',    ( ( path, stats   ) => @on_change         path  ) if @on_change?\n#     @_watcher.on 'unlink',    ( ( path          ) => @on_unlink         path  ) if @on_unlink?\n#     @_watcher.on 'addDir',    ( ( path          ) => @on_add_folder     path  ) if @on_add_folder?\n#     @_watcher.on 'unlinkDir', ( ( path          ) => @on_unlink_folder  path  ) if @on_unlink_folder?\n#     #.......................................................................................................\n#     @_watcher.on 'ready',     ( => @on_ready()                                ) if @on_ready?\n#     @_watcher.on 'raw',       ( ( key, path, d  ) => @on_raw key, path, d     ) if @on_raw?\n#     @_watcher.on 'error',     ( ( error         ) => @on_error error          ) if @on_error?\n#     #.......................................................................................................\n#     if @on_all?\n#       @_watcher.on 'all', ( key, path ) =>\n#         key = 'add_folder'    if key is 'addDir'\n#         key = 'unlink_folder' if key is 'unlinkDir'\n#         @on_all key, path\n#     #.......................................................................................................\n#     return null\n\n#   #---------------------------------------------------------------------------------------------------------\n#   on_error: ( path ) -> throw error\n#     ###\n#     watcher.on 'error', ( error ) ->\n#       debug '^guy.watch@2^', 'error', error.message\n#       for k, v of error\n#         key = k + ': '\n#         debug ( CND.reverse key.padEnd 25 ), ( CND.yellow rpr v )\n#       if error.message.startsWith \"Couldn't initialize inotify\"\n#         reject error.message\n#         defer -> process.exit 1\n#       debug CND.reverse \"error #{rpr error.message} occurred for path: #{CND.yellow rpr path}\"\n#     ###\n\n#   #---------------------------------------------------------------------------------------------------------\n#   add_path: ( path, P... ) ->\n#     @_watcher.add path, P...\n#     return null\n\n\n# #===========================================================================================================\n# class @Reporting_watcher extends @Watcher\n#   on_add:           ( path      ) -> debug '^guy.watch@3^ add           ', { path, }\n#   on_change:        ( path      ) -> debug '^guy.watch@4^ change        ', { path, }\n#   on_unlink:        ( path      ) -> debug '^guy.watch@5^ unlink        ', { path, }\n#   on_add_folder:    ( path      ) -> debug '^guy.watch@6^ add_folder    ', { path, }\n#   on_unlink_folder: ( path      ) -> debug '^guy.watch@7^ unlink_folder ', { path, }\n#   on_ready:                       -> debug '^guy.watch@8^ ready         '\n#   # on_all:           ( key, path ) -> debug '^guy.watch@3^ all           ', { key, path, }\n#   # on_raw:           ( P... ) -> debug '^guy.watch@9^ raw           ', P\n#   # on_error:         ( error     ) -> debug '^guy.watch@10^ error         ', rpr error\n"
  ]
}