// Generated by CoffeeScript 1.10.0
(function() {
  var $, $async, CND, D, FS, PATH, _request, alert, badge, debug, echo, help, info, log, rpr, step, urge, warn, whisper, ﾏダmodule_path;

  PATH = require('path');

  FS = require('fs');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'GUY';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  _request = require('request');

  step = require('coffeenode-suspend').step;

  D = require('pipedreams');

  $ = D.$, $async = D.$async;

  require('pipedreams/lib/plugin-tabulate');

  ﾏダmodule_path = Symbol["for"]('module-path');

  this._request = function(url, handler) {
    _request(url, (function(_this) {
      return function(error, response, body) {
        var status;
        if (error != null) {
          return handler(error);
        }
        if ((status = response.statusCode) !== 200) {
          return handler(new Error(url + "\n" + status + " -- " + response.statusMessage));
        }
        return handler(null, JSON.parse(body));
      };
    })(this));
    return null;
  };

  this._new_state = function(settings) {

    /* TAINT use multimix for options handling */
    return Object.assign({}, require('../options'));
  };

  this.$read_package_json = function(S) {
    return $((function(_this) {
      return function(package_path, send) {
        var package_json;
        package_json = require(PATH.resolve(package_path, 'package.json'));
        package_json[ﾏダmodule_path] = package_path;
        return send(package_json);
      };
    })(this));
  };

  this.$compile_package_info = function(S) {
    return $((function(_this) {
      return function(package_json, send) {
        var Z;
        Z = {};
        Z['path'] = package_json[ﾏダmodule_path];
        Z['name'] = package_json['name'];
        Z['local-version'] = package_json['version'];
        Z['dependencies'] = package_json['dependencies'];
        return send(Z);
      };
    })(this));
  };

  this.$read_npm = function(S) {
    return $async((function(_this) {
      return function(package_info, send, end) {
        var package_name, url;
        if (package_info != null) {
          package_name = package_info['name'];
          url = "http://registry.npmjs.org/" + package_name;
          step(function*(resume) {
            var npm_info, ref, ref1, ref2;
            npm_info = (yield _this._request(url, resume));
            debug(package_name);
            package_info['npm-latest-version'] = (ref = (ref1 = npm_info['dist-tags']) != null ? ref1['latest'] : void 0) != null ? ref : null;
            package_info['npm-all-versions'] = Object.keys((ref2 = npm_info['versions']) != null ? ref2 : {});
            return send.done(package_info);
          });
        }
        if (end != null) {
          return end();
        }
      };
    })(this));
  };

  this.$as_table = function(S) {
    var $cast, $colorize, $show, table_settings;
    table_settings = {
      alignment: 'left',
      width: 50,
      widths: [25, 12]
    };
    $cast = (function(_this) {
      return function() {
        return $(function(row, send) {
          return send(row);
        });
      };
    })(this);
    $colorize = (function(_this) {
      return function() {
        return $(function(row, send) {
          return send(row);
        });
      };
    })(this);
    $show = (function(_this) {
      return function() {
        return $(function(row) {
          return echo(row);
        });
      };
    })(this);
    return D.new_stream({
      pipeline: [$cast(), $colorize(), D.$tabulate(table_settings), $show()]
    });
  };

  this.f = function(handler) {
    var S, input, package_path;
    S = this._new_state();
    debug('9921', S);
    input = D.new_stream();
    input.pipe(this.$read_package_json(S)).pipe(this.$compile_package_info(S)).pipe(this.$read_npm(S)).pipe(this.$as_table(S)).pipe($('finish', function() {
      return handler();
    }));
    package_path = '/home/flow/io/mingkwai-ncr';
    package_path = '/home/flow/io/interskiplist';
    D.send(input, package_path);
    D.end(input);
    return null;
  };

}).call(this);

//# sourceMappingURL=main.js.map
