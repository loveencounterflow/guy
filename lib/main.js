// Generated by CoffeeScript 1.10.0
(function() {
  var $, CND, D, FS, PATH, alert, badge, debug, echo, help, info, log, rpr, step, urge, warn, whisper, ﾏダmodule_path;

  PATH = require('path');

  FS = require('fs');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'GUY';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  step = require('coffeenode-suspend').step;

  D = require('pipedreams');

  $ = D.$;

  ﾏダmodule_path = Symbol["for"]('module-path');

  this._new_state = function(settings) {
    return {};
  };

  this.$read_package_info = function(S) {
    return $((function(_this) {
      return function(module_path, send) {
        var package_info;
        package_info = require(PATH.resolve(module_path, 'package.json'));
        package_info[ﾏダmodule_path] = module_path;
        return send(package_info);
      };
    })(this));
  };

  this.$compile_package_info = function(S) {
    return $((function(_this) {
      return function(package_info, send) {
        var Z;
        Z = {};
        Z['path'] = package_info[ﾏダmodule_path];
        Z['name'] = package_info['name'];
        Z['version'] = package_info['version'];
        Z['dependencies'] = package_info['dependencies'];
        return send(Z);
      };
    })(this));
  };

  this.f = function(handler) {
    var S, input, module_path;
    S = this._new_state();
    input = D.new_stream();
    input.pipe(this.$read_package_info(S)).pipe(this.$compile_package_info(S)).pipe(D.$show()).pipe($('finish', function() {
      return handler();
    }));
    module_path = '/home/flow/io/mingkwai-ncr';
    D.send(input, module_path);
    D.end(input);
    return null;
  };

}).call(this);

//# sourceMappingURL=main.js.map
