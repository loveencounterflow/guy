// Generated by CoffeeScript 2.4.1
(function() {
  //###########################################################################################################
  var $, $async, CND, D, FS, PATH, SEMVER, _read_latest_version, _request, alert, badge, debug, echo, help, info, log, moment, rpr, step, urge, warn, whisper, σ_module_path,
    indexOf = [].indexOf;

  PATH = require('path');

  FS = require('fs');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'GUY';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  _request = require('request');

  _read_latest_version = require('latest-version');

  ({step} = require('coffeenode-suspend'));

  D = require('pipedreams');

  ({$, $async} = D);

  require('pipedreams/lib/plugin-tabulate');

  moment = require('moment');

  SEMVER = require('semver');

  //...........................................................................................................
  σ_module_path = Symbol.for('module-path');

  //===========================================================================================================
  // HELPERS
  //-----------------------------------------------------------------------------------------------------------
  this._request = function(url, handler) {
    _request(url, (error, response, body) => {
      var status;
      if (error != null) {
        return handler(error);
      }
      switch (status = response.statusCode) {
        case 404:
          return handler(null, {});
        case 200:
          return handler(null, JSON.parse(body));
        default:
          return handler(new Error(`${url}\n${status} -- ${response.statusMessage}`));
      }
    });
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._new_state = function(settings) {
    /* TAINT use multimix for options handling */
    return Object.assign({}, require('../options'));
  };

  //-----------------------------------------------------------------------------------------------------------
  this._find_max_semvers = function(semvers) {
    var i, is_semver, is_v0, len, max_all_semver, max_v0_semver, semver, v0_matcher;
    /* choose whether you want all max major versions */
    //.........................................................................................................
    max_all_semver = null;
    max_v0_semver = null;
    // v0_matcher      = '^0.x' # OK but not so clear; see https://github.com/npm/node-semver#caret-ranges-123-025-004
    v0_matcher = '>=0.0.0 <1.0.0';
    is_semver = function(x) {
      return (SEMVER.valid(x)) != null;
    };
    is_v0 = function(semver) {
      return SEMVER.satisfies(semver, v0_matcher);
    };
    for (i = 0, len = semvers.length; i < len; i++) {
      semver = semvers[i];
      if (!is_semver(semver)) {
        continue;
      }
      if (max_all_semver != null) {
        if (SEMVER.gt(semver, max_all_semver)) {
          max_all_semver = semver;
        }
      } else {
        max_all_semver = semver;
      }
      if (is_v0(semver)) {
        if (max_v0_semver != null) {
          if (SEMVER.gt(semver, max_v0_semver)) {
            max_v0_semver = semver;
          }
        } else {
          max_v0_semver = semver;
        }
      }
    }
    //.........................................................................................................
    return [max_v0_semver, max_all_semver];
  };

  //-----------------------------------------------------------------------------------------------------------
  this.read_latest_version = function(package_name, handler) {
    /* TAINT error handling? */
    (_read_latest_version(package_name)).then((version) => {
      return handler(null, version);
    });
    return null;
  };

  //===========================================================================================================
  // TRANFORMS
  //-----------------------------------------------------------------------------------------------------------
  this.$read_package_json = function(S) {
    return $((package_path, send) => {
      var package_json;
      package_json = require(PATH.resolve(package_path, 'package.json'));
      package_json[σ_module_path] = package_path;
      return send(package_json);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$compile_pkgnfo = function(S) {
    /* `pkgnfo`: package info object */
    return $((package_json, send) => {
      var dependency_name, pkgnfo, ref, semver_term;
      pkgnfo = {};
      pkgnfo['path'] = package_json[σ_module_path];
      pkgnfo['name'] = package_json['name'];
      pkgnfo['local'] = {
        version: package_json['version']
      };
      pkgnfo['dependencies'] = package_json['dependencies'];
      //.......................................................................................................
      if (package_json['devDependencies'] != null) {
        ref = package_json['devDependencies'];
        for (dependency_name in ref) {
          semver_term = ref[dependency_name];
          pkgnfo['dependencies'][dependency_name] = semver_term;
        }
      }
      //.......................................................................................................
      return send(pkgnfo);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$read_npm = function(S) {
    var version_cache;
    version_cache = {};
    return $async((pkgnfo, send, end) => {
      var date_by_versions, package_name, self, url;
      //.......................................................................................................
      if (pkgnfo != null) {
        pkgnfo['npm'] = {};
        pkgnfo['npm']['date-by-versions'] = date_by_versions = {};
        package_name = pkgnfo['name'];
        url = `http://registry.npmjs.org/${package_name}`;
        self = this;
        //.....................................................................................................
        step(function*(resume) {
          var date_txt, dependency_name, latest_version, npm_info, npm_version, ref, ref1, version;
          npm_info = (yield self._request(url, resume));
          // debug '33372', npm_info[ 'time' ]
          if (npm_info['time'] != null) {
            ref = npm_info['time'];
            for (npm_version in ref) {
              date_txt = ref[npm_version];
              /* choose local or universal time */
              date_by_versions[npm_version] = moment(date_txt);
            }
          }
          ref1 = pkgnfo['dependencies'];
          // date_by_versions[ npm_version ] = moment.utc date_txt
          for (dependency_name in ref1) {
            version = ref1[dependency_name];
            if ((latest_version = version_cache[dependency_name]) == null) {
              latest_version = (yield self.read_latest_version(dependency_name, resume));
              version_cache[dependency_name] = latest_version;
            }
            // debug '88721', package_name, dependency_name, version, latest_version
            /* TAINT shouldn't modify struture, just add data */
            /* TAINT naming: version, latest_version? */
            /* TAINT what is called 'version' here is really a version range like '^3.4.5' */
            pkgnfo['dependencies'][dependency_name] = {version, latest_version};
          }
          send.done(pkgnfo);
          return null;
        });
      }
      //.......................................................................................................
      if (end != null) {
        end();
      }
      //.......................................................................................................
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$identify_interesting_versions = function(S) {
    return $((pkgnfo) => {
      var i, len, ref, target, version;
      pkgnfo['interesting-versions'] = target = [];
      target.push('created');
      target.push('modified');
      ref = this._find_max_semvers(Object.keys(pkgnfo['npm']['date-by-versions']));
      for (i = 0, len = ref.length; i < len; i++) {
        version = ref[i];
        target.push(version);
      }
      //.......................................................................................................
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$as_table = function(S) {
    var $cast, $colorize, $show, table_settings;
    // column_count = 2
    // if ( console_width = process.stdout.columns )
    //   width = console_width - column_count * 4 - 1
    // else
    //   width = 108
    table_settings = {
      headings: ['package', 'dependency', 'local', 'npm', 'date'],
      alignment: 'left',
      widths: [30, 30, 12, 12, 25]
    };
    // alignments:     [ null, null, 'left', ]
    //.........................................................................................................
    $cast = () => {
      return $((pkgnfo, send) => {
        var date, date_by_versions, date_txt, latest_version, line_count, local_version, name, name_display, npm_version, package_name, ref, results, version;
        // debug '99928', pkgnfo
        local_version = pkgnfo['local']['version'];
        date_by_versions = pkgnfo['npm']['date-by-versions'];
        package_name = pkgnfo['name'];
        name_display = pkgnfo['name'];
        line_count = 0;
//.....................................................................................................
        for (npm_version in date_by_versions) {
          date = date_by_versions[npm_version];
          if (indexOf.call(pkgnfo['interesting-versions'], npm_version) < 0) {
            continue;
          }
          line_count += +1;
          date_txt = (date.format('YYYY MM DD')) + ` (${date.fromNow()})`;
          send([package_name, '', local_version, npm_version, date_txt]);
        }
        if (line_count < 1) {
          send([package_name, '', local_version, '-/-', '-/-']);
        }
        ref = pkgnfo['dependencies'];
        //.....................................................................................................
        results = [];
        for (name in ref) {
          ({version, latest_version} = ref[name]);
          results.push(send([package_name, name, version, latest_version, '']));
        }
        return results;
      });
    };
    //.........................................................................................................
    $colorize = () => {
      var prv_package_name;
      prv_package_name = null;
      return $((row, send) => {
        var clean_version, color, date, dependency_name, diff, error, latest_version, package_name, version;
        // row[ 'date' ] = CND.yellow  row[ 'date' ]
        // row[ 'size' ] = CND.steel   row[ 'size' ]
        // row[ 'name' ] = CND.lime    row[ 'name' ]
        [package_name, dependency_name, version, latest_version, date] = row;
        if (prv_package_name !== package_name) {
          if (package_name != null) {
            send(['────────────────────', '────────────────────', '──────', '──────', '──────']);
          }
          prv_package_name = package_name;
        }
        color = null;
        if ((dependency_name != null) && dependency_name.length > 0) {
          if ((version != null) && version.length > 0) {
            if ((latest_version != null) && latest_version.length > 0) {
              // clean_version = SEMVER.clean version
              clean_version = version.replace(/[^.0-9]/g, '');
              try {
                // debug '88873',  [ version, latest_version, clean_version]
                diff = SEMVER.diff(clean_version, latest_version);
              } catch (error1) {
                error = error1;
                if (diff == null) {
                  diff = 'N/A';
                }
              }
              if (diff == null) {
                diff = 'ok';
              }
              color = CND.grey;
              switch (diff) {
                case 'major':
                  color = CND.red;
                  break;
                case 'minor':
                  color = CND.lime;
                  break;
                case 'patch':
                  color = CND.yellow;
              }
            }
          }
        }
        // debug '55222', [ version, latest_version, color diff, ]
        if (color != null) {
          return send([package_name, dependency_name, version, color(latest_version), date]);
        } else {
          return send(row);
        }
      });
    };
    //.........................................................................................................
    $show = () => {
      return $((row) => {
        return echo(row);
      });
    };
    //.........................................................................................................
    return D.new_stream({
      pipeline: [$cast(), $colorize(), D.$tabulate(table_settings), $show()]
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.f = function(handler) {
    var S, i, input, len, package_locator, package_path, package_paths;
    S = this._new_state();
    input = D.new_stream();
    //.........................................................................................................
    input.pipe(this.$read_package_json(S)).pipe(this.$compile_pkgnfo(S)).pipe(this.$read_npm(S)).pipe(this.$identify_interesting_versions(S)).pipe(this.$as_table(S)).pipe($('finish', function() {
      return handler();
    }));
    //.........................................................................................................
    package_paths = [
      // 'io/guy-test'
      // 'io/guy'
      // 'io/cnd'
      // 'io/kleinbild'
      'io/jizura-datasources',
      // 'io-b/coffeenode-chr'
      // 'io/multimix'
      // 'io/ncr'
      // 'io/pipedreams'
      // 'io/interskiplist'
      // 'io/mingkwai-ncr'
      // 'io/mingkwai-rack'
      // 'io/mingkwai-typesetter'
      // 'io/mingkwai-typesetter-jizura'
      'io/hollerith',
      'io/hollerith-codec'
    ];
// 'io/jizura-db-feeder'
    for (i = 0, len = package_paths.length; i < len; i++) {
      package_path = package_paths[i];
      package_locator = PATH.resolve(__dirname, '../../..', package_path);
      D.send(input, package_locator);
    }
    D.end(input);
    //.........................................................................................................
    return null;
  };

  // ############################################################################################################
// unless module.parent?
//   @f()

}).call(this);

//# sourceMappingURL=main.js.map
