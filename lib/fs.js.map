{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/fs.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,QAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,QAAA;;;EAGA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,KAAK,CAAC,MAAN,CAAA,CAF5B,EAJA;;;EAUA,KAAK,CAAC,OAAN,CAAc,6BAAd,EAA6C;IAAA,KAAA,EAC3C;MAAA,eAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAApE;MACA,iEAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,CAAC,CAAC,UAAF,KAAgB,CAAC,KAAnB,CAAA,IAAiC,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAC,CAAC,UAAhB,CAAF;MAA1C,CADpE;MAEA,iEAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,CAAC,CAAC,UAAF,KAAgB,CAAC,KAAnB,CAAA,IAAiC,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAC,CAAC,UAAhB,CAAF;MAA1C;IAFpE;EAD2C,CAA7C,EAVA;;;EAgBA,QAAA,GACE;IAAA,2BAAA,EACE;MAAA,UAAA,EAAgB,CAAhB;MACA,UAAA,EAAgB,CAAC;IADjB;EADF,EAjBF;;;EAsBA,IAAC,CAAA,UAAD,GAAc,SAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AACd,QAAA,IAAA,EAAA,SAAA;;;IAEE,QAAQ,CAAC,aAAT,CAAuB,IAAvB;IACA,GAAA,GAAM;MAAE,MAAA,EAAQ,IAAV;MAAgB,GAAA;IAAhB;IACN,QAAQ,CAAC,OAAT,CAAiB,GAAG,CAAC,MAArB;IACA,GAAA,GACE;MAAA,SAAA,EAAoB,CAAA,GAAI,IAAxB;MACA,gBAAA,EAAoB,IADpB;IAAA;IAEF,SAAA,GAAY,IAAI,CAAE,OAAA,CAAQ,qCAAR,CAAF,CAAJ,CAAsD,IAAtD,EAA4D,GAA5D;IACZ,IAAG,GAAG,CAAC,MAAP;AAAoB,aAAkC,CAAE,IAAA,GAAO,SAAS,CAAC,IAAV,CAAA,CAAT,CAAA,KAAiC,KAAnE;QAAA,MAAM,IAAI,CAAC,QAAL,CAAc,OAAd;MAAN,CAApB;KAAA,MAAA;AACoB,aAAkC,CAAE,IAAA,GAAO,SAAS,CAAC,IAAV,CAAA,CAAT,CAAA,KAAiC,KAAnE;QAAA,MAAM;MAAN,CADpB;;AAEA,WAAO;EAZK,EAtBd;;;EAqCA,IAAC,CAAA,mBAAD,GAAuB,SAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AACvB,QAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA;IAAE,QAAQ,CAAC,2BAAT,CAAqC,CAAE,GAAA,GAAM,CAAE,GAAA,QAAQ,CAAC,2BAAX,EAA2C,GAAA,GAA3C,CAAR,CAArC;IACA,IAAU,CAAE,GAAG,CAAC,UAAJ,KAAkB,CAApB,CAAA,IAA2B,CAAE,GAAG,CAAC,UAAJ,KAAkB,CAApB,CAArC;AAAA,aAAA;;IACA,UAAA,GAAa;IACb,UAAA,GAAa;AACb,WAAA,IAAA;AACE;MAAA,KAAA,WAAA;QACE,MAAM;QACN,UAAA;QAAc,IAAe,UAAA,IAAc,GAAG,CAAC,UAAjC;AAAA,iBAAO,KAAP;;MAFhB;MAGA,UAAA;MAAc,IAAe,UAAA,IAAc,GAAG,CAAC,UAAjC;AAAA,eAAO,KAAP;;IAJhB;AAKA,WAAO;EAVc;AArCvB",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  type_of }               = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'guy_walk_circular_lines_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"( x.loop_count is +Infinity ) or ( @isa.cardinal x.loop_count )\":  ( x ) -> ( x.loop_count is +Infinity ) or ( @isa.cardinal x.loop_count )\n  \"( x.line_count is +Infinity ) or ( @isa.cardinal x.line_count )\":  ( x ) -> ( x.line_count is +Infinity ) or ( @isa.cardinal x.line_count )\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  guy_walk_circular_lines_cfg:\n    loop_count:     1\n    line_count:     +Infinity\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines = ( path, cfg ) ->\n  ### TAINT make newline, buffersize configurable ###\n  ### thx to https://github.com/nacholibre/node-readlines ###\n  validate.nonempty_text path\n  cfg = { decode: true, cfg..., }\n  validate.boolean cfg.decode\n  cfg =\n    readChunk:          4 * 1024 # chunk_size, byte_count\n    newLineCharacter:   '\\n'      # nl\n  readlines = new ( require '../dependencies/n-readlines-patched' ) path, cfg\n  if cfg.decode then  yield line.toString 'utf-8' while ( line = readlines.next() ) isnt false\n  else                yield line                  while ( line = readlines.next() ) isnt false\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_circular_lines = ( path, cfg ) ->\n  validate.guy_walk_circular_lines_cfg ( cfg = { defaults.guy_walk_circular_lines_cfg..., cfg..., } )\n  return if ( cfg.line_count is 0 ) or ( cfg.loop_count is 0 )\n  line_count = 0\n  loop_count = 0\n  loop\n    for line from @walk_lines path\n      yield line\n      line_count++; return null if line_count >= cfg.line_count\n    loop_count++; return null if loop_count >= cfg.loop_count\n  return null\n\n\n"
  ]
}