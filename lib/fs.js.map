{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/fs.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,QAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,QAAA;;;EAGA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,KAAK,CAAC,MAAN,CAAA,CAF5B;;EAGA,MAAA,GAA4B,MAAA,CAAO,QAAP;;EAC5B,QAAA,GAA4B,CAAE,OAAA,CAAQ,IAAR,CAAF,CAAgB,CAAC,QAAjB,CAAA,EAR5B;;;EAWA,KAAK,CAAC,OAAN,CAAc,oBAAd,EAAoC;IAAA,KAAA,EAClC;MAAA,eAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAApE;MACA,uBAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,MAAf;MAAT;IADpE;EADkC,CAApC,EAXA;;;EAgBA,KAAK,CAAC,OAAN,CAAc,6BAAd,EAA6C;IAAA,KAAA,EAC3C;MAAA,eAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAApE;MACA,uBAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,MAAf;MAAT,CADpE;MAEA,iEAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,CAAC,CAAC,UAAF,KAAgB,CAAC,KAAnB,CAAA,IAAiC,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAC,CAAC,UAAhB,CAAF;MAA1C,CAFpE;MAGA,iEAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,CAAC,CAAC,UAAF,KAAgB,CAAC,KAAnB,CAAA,IAAiC,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAC,CAAC,UAAhB,CAAF;MAA1C;IAHpE;EAD2C,CAA7C,EAhBA;;;EAuBA,KAAK,CAAC,OAAN,CAAc,0BAAd,EAA0C;IAAA,KAAA,EACxC;MAAA,eAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAApE;MACA,wBAAA,EAAoE,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAC,CAAC,MAAhB;MAAT;IADpE;EADwC,CAA1C,EAvBA;;;EA4BA,QAAA,GACE;IAAA,kBAAA,EACE;MAAA,MAAA,EAAgB;IAAhB,CADF;IAEA,2BAAA,EACE;MAAA,MAAA,EAAgB,IAAhB;MACA,UAAA,EAAgB,CADhB;MAEA,UAAA,EAAgB,CAAC;IAFjB,CAHF;IAMA,wBAAA,EACE;MAAA,MAAA,EAAgB;IAAhB;EAPF,EA7BF;;;EAuCA,IAAC,CAAA,UAAD,GAAc,SAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AACd,QAAA,IAAA,EAAA,YAAA,EAAA,SAAA;;;IAEE,QAAQ,CAAC,kBAAT,CAA4B,CAAE,GAAA,GAAM,CAAE,GAAA,QAAQ,CAAC,kBAAX,EAAkC,GAAA,GAAlC,CAAR,CAA5B;IACA,QAAQ,CAAC,aAAT,CAAuB,IAAvB;IACA,YAAA,GACE;MAAA,SAAA,EAAoB,CAAA,GAAI,IAAxB;MACA,gBAAA,EAAoB,IADpB;IAAA;IAEF,SAAA,GAAY,IAAI,CAAE,OAAA,CAAQ,qCAAR,CAAF,CAAJ,CAAsD,IAAtD,EAA4D,YAA5D;IACZ,IAAG,GAAG,CAAC,MAAP;AACE,aAAM,CAAE,IAAA,GAAO,SAAS,CAAC,IAAV,CAAA,CAAT,CAAA,KAAiC,KAAvC;QACE,MAAM,IAAI,CAAC,QAAL,CAAc,OAAd;MADR,CADF;KAAA,MAAA;AAIE,aAAM,CAAE,IAAA,GAAO,SAAS,CAAC,IAAV,CAAA,CAAT,CAAA,KAAiC,KAAvC;QACE,MAAM;MADR,CAJF;;AAMA,WAAO;EAfK,EAvCd;;;EAyDA,IAAC,CAAA,mBAAD,GAAuB,SAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AACvB,QAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA;IAAE,QAAQ,CAAC,2BAAT,CAAqC,CAAE,GAAA,GAAM,CAAE,GAAA,QAAQ,CAAC,2BAAX,EAA2C,GAAA,GAA3C,CAAR,CAArC;IACA,IAAU,CAAE,GAAG,CAAC,UAAJ,KAAkB,CAApB,CAAA,IAA2B,CAAE,GAAG,CAAC,UAAJ,KAAkB,CAApB,CAArC;AAAA,aAAA;;IACA,UAAA,GAAa;IACb,UAAA,GAAa;AACb,WAAA,IAAA;AACE;;;MAAA,KAAA,WAAA;QACE,MAAM;QACN,UAAA;QAAc,IAAe,UAAA,IAAc,GAAG,CAAC,UAAjC;AAAA,iBAAO,KAAP;;MAFhB;MAGA,UAAA;MAAc,IAAe,UAAA,IAAc,GAAG,CAAC,UAAjC;AAAA,eAAO,KAAP;;IAJhB;AAKA,WAAO;EAVc,EAzDvB;;;EAsEA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAE,IAAF,EAAQ,WAAW,MAAnB,CAAA;AACjB,QAAA;IAAE,QAAQ,CAAC,aAAT,CAAuB,IAAvB;AACA;AAAI,aAAO,CAAE,CAAE,OAAA,CAAQ,IAAR,CAAF,CAAgB,CAAC,QAAjB,CAA0B,IAA1B,CAAF,CAAkC,CAAC,KAA9C;KAAmD,cAAA;MAAM;MACvD,IAAiB,QAAA,KAAY,MAA7B;QAAA,MAAM,MAAN;;MACA,IAAiB,KAAK,CAAC,IAAN,KAAgB,QAAjC;QAAA,MAAM,MAAN;OAFiD;;AAGnD,WAAO;EALQ,EAtEjB;;;EA8EA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AACpB,QAAA,EAAA,EAAA,CAAA,EAAA,OAAA,EAAA;IAAE,QAAQ,CAAC,aAAT,CAAuB,IAAvB;IACA,QAAQ,CAAC,wBAAT,CAAkC,CAAE,GAAA,GAAM,CAAE,GAAA,QAAQ,CAAC,wBAAX,EAAwC,GAAA,GAAxC,CAAR,CAAlC;IACA,EAAA,GAAY,OAAA,CAAQ,eAAR;IACZ,OAAA,GAAe,QAAA,KAAY,OAAf,GAA4B,SAA5B,GAA2C;IACvD,MAAA,GAAY,EAAE,CAAC,SAAH,CAAa,OAAb,EAAsB,CAAE,IAAF,EAAQ,IAAR,CAAtB;IACZ,IAAG,MAAM,CAAC,MAAP,KAAmB,CAAtB;MACE,IAAG,qBAAH;QACE,MAAM,IAAI,KAAJ,CAAU,8BAAA,GAAiC,MAAM,CAAC,MAAM,CAAC,QAAd,CAAuB,OAAvB,CAA3C,EADR;OAAA,MAAA;QAGE,MAAM,IAAI,KAAJ,CAAU,8BAAA,GAAiC,CAAE,OAAA,CAAQ,MAAR,CAAF,CAAkB,CAAC,OAAnB,CAA2B,MAAM,CAAC,KAAlC,CAA3C,EAHR;OADF;;IAKA,CAAA,GAAI;IACJ,CAAA,GAAI,CAAC,CAAC,MAAM,CAAC,QAAT,CAAkB,OAAlB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,OAAV,EAAmB,EAAnB;IACJ,CAAA,GAAI,CAAC;IACL,IAAO,CAAC,CAAC,MAAF,KAAY,GAAG,CAAC,MAAvB;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,8DAAA,CAAA,CAAiE,GAAG,CAAC,MAArE,CAAA,OAAA,CAAA,CAAqF,OAArF,CAAA,CAAV,EADR;;AAEA,WAAO;EAjBW;AA9EpB",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  type_of }               = types.export()\nmisfit                    = Symbol 'misfit'\nplatform                  = ( require 'os' ).platform()\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'guy_walk_lines_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa.boolean x.decode\":                                            ( x ) -> @isa.boolean x.decode\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'guy_walk_circular_lines_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa.boolean x.decode\":                                            ( x ) -> @isa.boolean x.decode\n  \"( x.loop_count is +Infinity ) or ( @isa.cardinal x.loop_count )\":  ( x ) -> ( x.loop_count is +Infinity ) or ( @isa.cardinal x.loop_count )\n  \"( x.line_count is +Infinity ) or ( @isa.cardinal x.line_count )\":  ( x ) -> ( x.line_count is +Infinity ) or ( @isa.cardinal x.line_count )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'guy_get_content_hash_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa.cardinal x.length\":                                           ( x ) -> @isa.cardinal x.length\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  guy_walk_lines_cfg:\n    decode:         true\n  guy_walk_circular_lines_cfg:\n    decode:         true\n    loop_count:     1\n    line_count:     +Infinity\n  guy_get_content_hash_cfg:\n    length:         17\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines = ( path, cfg ) ->\n  ### TAINT make newline, buffersize configurable ###\n  ### thx to https://github.com/nacholibre/node-readlines ###\n  validate.guy_walk_lines_cfg ( cfg = { defaults.guy_walk_lines_cfg..., cfg..., } )\n  validate.nonempty_text path\n  readline_cfg =\n    readChunk:          4 * 1024 # chunk_size, byte_count\n    newLineCharacter:   '\\n'      # nl\n  readlines = new ( require '../dependencies/n-readlines-patched' ) path, readline_cfg\n  if cfg.decode\n    while ( line = readlines.next() ) isnt false\n      yield line.toString 'utf-8'\n  else\n    while ( line = readlines.next() ) isnt false\n      yield line\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_circular_lines = ( path, cfg ) ->\n  validate.guy_walk_circular_lines_cfg ( cfg = { defaults.guy_walk_circular_lines_cfg..., cfg..., } )\n  return if ( cfg.line_count is 0 ) or ( cfg.loop_count is 0 )\n  line_count = 0\n  loop_count = 0\n  loop\n    for line from @walk_lines path, { decode: cfg.decode, }\n      yield line\n      line_count++; return null if line_count >= cfg.line_count\n    loop_count++; return null if loop_count >= cfg.loop_count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_file_size = ( path, fallback = misfit ) ->\n  validate.nonempty_text path\n  try return ( ( require 'fs' ).statSync path ).size catch error\n    throw error if ( fallback is misfit )\n    throw error if ( error.code isnt 'ENOENT' )\n  return fallback\n\n#-----------------------------------------------------------------------------------------------------------\n@get_content_hash = ( path, cfg ) ->\n  validate.nonempty_text path\n  validate.guy_get_content_hash_cfg ( cfg = { defaults.guy_get_content_hash_cfg..., cfg..., } )\n  CP        = require 'child_process'\n  command   = if platform is 'linux' then 'sha1sum' else 'shasum'\n  result    = CP.spawnSync command, [ '-b', path, ]\n  if result.status isnt 0\n    if result.stderr?\n      throw new Error \"^guy.fs.get_content_hash@1^ \" + result.stderr.toString 'utf-8'\n    else\n      throw new Error \"^guy.fs.get_content_hash@1^ \" + ( require 'util' ).inspect result.error\n  R = result\n  R = R.stdout.toString 'utf-8'\n  R = R.replace /\\s.*$/, ''\n  R = R[ ... cfg.length ]\n  unless R.length is cfg.length\n    throw new Error \"^guy.fs.get_content_hash@1^ unable to generate hash of length #{cfg.length} using #{command}\"\n  return R\n\n\n\n\n\n\n\n\n"
  ]
}