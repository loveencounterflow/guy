{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './_helpers'\nmisfit                    = Symbol 'misfit'\nplatform                  = ( require 'os' ).platform()\nrpr                       = ( require 'util' ).inspect\n#-----------------------------------------------------------------------------------------------------------\n### Constants: ###\ncr                        = 0x0d\nlf                        = 0x0a\nC_empty_string            = ''\nC_empty_buffer            = Buffer.from C_empty_string\nC_cr_buffer               = Buffer.from [ cr, ]\nC_lf_buffer               = Buffer.from [ lf, ]\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_buffer_chr', ( x ) ->\n  return true if ( @isa.integer x ) and ( 0x00 <= x <= 0xff )\n  return true if ( @isa.buffer  x ) and ( x.length > 0 )\n  return true if ( @isa.text    x ) and ( x.length > 0 )\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_fs_walk_buffers_cfg', tests:\n  \"@isa.positive_integer x.chunk_size\":                               ( x ) -> @isa.positive_integer x.chunk_size\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_fs_walk_lines_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.encoding\":                           ( x ) -> @isa_optional.nonempty_text x.encoding\n  \"@isa.positive_integer x.chunk_size\":                               ( x ) -> @isa.positive_integer x.chunk_size\n  \"@isa.boolean x.trim\":                                              ( x ) -> @isa.boolean x.trim\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_walk_circular_lines_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa.boolean x.decode\":                                            ( x ) -> @isa.boolean x.decode\n  \"( x.loop_count is +Infinity ) or ( @isa.cardinal x.loop_count )\":  ( x ) -> ( x.loop_count is +Infinity ) or ( @isa.cardinal x.loop_count )\n  \"( x.line_count is +Infinity ) or ( @isa.cardinal x.line_count )\":  ( x ) -> ( x.line_count is +Infinity ) or ( @isa.cardinal x.line_count )\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_get_content_hash_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa.cardinal x.length\":                                           ( x ) -> @isa.cardinal x.length\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  guy_fs_walk_buffers_cfg:\n    chunk_size:     16 * 1024\n  guy_fs_walk_lines_cfg:\n    encoding:       'utf-8'\n    chunk_size:     16 * 1024\n    trim:           true\n  guy_walk_circular_lines_cfg:\n    decode:         true\n    loop_count:     1\n    line_count:     +Infinity\n  guy_get_content_hash_cfg:\n    length:         17\n    fallback:       misfit\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_buffers = ( path, cfg ) ->\n  H.types.validate.guy_fs_walk_buffers_cfg ( cfg = { defaults.guy_fs_walk_buffers_cfg..., cfg..., } )\n  H.types.validate.nonempty_text path\n  { chunk_size } = cfg\n  FS            = require 'node:fs'\n  fd            = FS.openSync path\n  byte_idx      = 0\n  loop\n    buffer      = Buffer.alloc chunk_size\n    byte_count  = FS.readSync fd, buffer, 0, chunk_size, byte_idx\n    break if byte_count is 0\n    byte_idx   += byte_count\n    buffer      = buffer.subarray 0, byte_count if byte_count < chunk_size\n    yield buffer\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines = ( path, cfg ) -> yield line for { line, } from @walk_lines_with_positions path, cfg\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines_with_positions = ( path, cfg ) ->\n  H.types.validate.guy_fs_walk_lines_cfg ( cfg = { defaults.guy_fs_walk_lines_cfg..., cfg..., } )\n  H.types.validate.nonempty_text path\n  { chunk_size\n    encoding\n    trim      } = cfg\n  #.........................................................................................................\n  count         = 0\n  for d from @_walk_lines_with_positions path, chunk_size\n    count++\n    if encoding?\n      d.line  = d.line.toString encoding\n      d.line  = d.line.trimEnd() if trim\n      d.nl    = d.nl.toString encoding\n      yield d\n    else\n      yield d\n  if count is 0\n    line  = if encoding? then C_empty_string else C_empty_buffer\n    nl    = if encoding? then C_empty_string else C_empty_buffer\n    yield { lnr: 1, line, nl, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_lines_with_positions = ( path, chunk_size ) ->\n  FS            = require 'node:fs'\n  fd            = FS.openSync path\n  byte_idx      = 0\n  prv_was_cr    = false\n  is_cr         = false\n  is_lf         = false\n  #.........................................................................................................\n  lnr           = 0\n  line          = null\n  line_cache    = []\n  nl_cache      = []\n  #.........................................................................................................\n  flush = ->\n    return if ( line_cache.length is 0 ) and ( nl_cache.length is 0 )\n    switch line_cache.length\n      when 0 then line  = C_empty_buffer\n      when 1 then line  = line_cache[ 0 ]\n      else        line  = Buffer.concat line_cache\n    switch nl_cache.length\n      when 0 then nl    = C_empty_buffer\n      when 1 then nl    = nl_cache[ 0 ]\n      else        nl    = Buffer.concat nl_cache\n    lnr++\n    yield { lnr, line, nl, }\n    line_cache.length = 0\n    nl_cache.length   = 0\n    return null\n  #.........................................................................................................\n  loop\n    buffer      = Buffer.alloc chunk_size\n    byte_count  = FS.readSync fd, buffer, 0, chunk_size, byte_idx\n    break if byte_count is 0\n    byte_idx   += byte_count\n    buffer      = buffer.subarray 0, byte_count if byte_count < chunk_size\n    first_idx   = 0\n    last_idx    = buffer.length - 1\n    loop\n      break if first_idx > last_idx\n      d         = @_walk_lines__advance buffer, first_idx\n      line_cache.push d.material if d.material? and d.material.length  > 0\n      nl_cache.push   d.eol      if d.eol?      and d.eol.length       > 0\n      is_cr     = d.eol is C_cr_buffer\n      is_lf     = d.eol is C_lf_buffer\n      first_idx = d.next_idx\n\n\n    yield from walk_lines buffer\n  #.........................................................................................................\n  yield from flush()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT add may_have_cr, may_have_lf as optimization to forego repeated unnecessary lookups ###\n@_walk_lines__advance = ( buffer, first_idx, may_have_cr = true, may_have_lf = true ) ->\n  material    = null\n  eol         = C_empty_buffer\n  next_idx_cr = -1\n  next_idx_lf = -1\n  next_idx_cr = buffer.indexOf cr, first_idx if may_have_cr\n  next_idx_lf = buffer.indexOf lf, first_idx if may_have_lf\n  next_idx    = buffer.length\n  #.........................................................................................................\n  if next_idx_cr is -1\n    if next_idx_lf is -1\n      return { material: buffer, eol, next_idx, } if first_idx is 0\n    else\n      next_idx    = next_idx_lf\n      eol         = C_lf_buffer\n  #.........................................................................................................\n  else if ( next_idx_lf is -1 ) or ( next_idx_cr < next_idx_lf )\n    next_idx    = next_idx_cr\n    eol         = C_cr_buffer\n  #.........................................................................................................\n  else\n    next_idx    = next_idx_lf\n    eol         = C_lf_buffer\n  #.........................................................................................................\n  material = buffer.subarray first_idx, next_idx\n  return { material, eol, next_idx: next_idx + 1, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@walk_circular_lines = ( path, cfg ) ->\n  H.types.validate.guy_walk_circular_lines_cfg ( cfg = { defaults.guy_walk_circular_lines_cfg..., cfg..., } )\n  return if ( cfg.line_count is 0 ) or ( cfg.loop_count is 0 )\n  line_count = 0\n  loop_count = 0\n  loop\n    for line from @walk_lines path, { decode: cfg.decode, }\n      yield line\n      line_count++; return null if line_count >= cfg.line_count\n    loop_count++; return null if loop_count >= cfg.loop_count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_file_size = ( path, fallback = misfit ) ->\n  H.types.validate.nonempty_text path\n  try return ( ( require 'fs' ).statSync path ).size catch error\n    throw error if ( fallback is misfit )\n    throw error if ( error.code isnt 'ENOENT' )\n  return fallback\n\n#-----------------------------------------------------------------------------------------------------------\n@get_content_hash = ( path, cfg ) ->\n  H.types.validate.nonempty_text path\n  H.types.validate.guy_get_content_hash_cfg ( cfg = { defaults.guy_get_content_hash_cfg..., cfg..., } )\n  CP        = require 'child_process'\n  command   = if platform is 'linux' then 'sha1sum' else 'shasum'\n  result    = CP.spawnSync command, [ '-b', path, ]\n  if result.status isnt 0\n    return cfg.fallback unless cfg.fallback is misfit\n    if result.stderr?\n      throw new Error \"^guy.fs.get_content_hash@1^ \" + result.stderr.toString 'utf-8'\n    else\n      throw new Error \"^guy.fs.get_content_hash@1^ \" + ( require 'util' ).inspect result.error\n  R = result\n  R = R.stdout.toString 'utf-8'\n  R = R.replace /\\s.*$/, ''\n  R = R[ ... cfg.length ]\n  unless R.length is cfg.length\n    throw new Error \"^guy.fs.get_content_hash@1^ unable to generate hash of length #{cfg.length} using #{command}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@rename_sync = ( from_path, to_path ) ->\n  ### Same as `FS.renameSync()`, but falls back to `FS.copyFileSync()`, `FS.unlinkSync()` in case device\n  boundaries are crossed. Thx to https://github.com/sindresorhus/move-file/blob/main/index.js ###\n  FS = require 'node:fs'\n  try FS.renameSync from_path, to_path catch error\n    throw error unless error.code is 'EXDEV'\n    FS.copyFileSync from_path, to_path\n    FS.unlinkSync from_path\n  return null\n\n\n\n\n\n\n"
  ]
}