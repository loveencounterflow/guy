{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './_helpers'\nmisfit                    = Symbol 'misfit'\nplatform                  = ( require 'os' ).platform()\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_buffer_chr', ( x ) ->\n  return true if ( @isa.integer x ) and ( 0x00 <= x <= 0xff )\n  return true if ( @isa.buffer  x ) and ( x.length > 0 )\n  return true if ( @isa.text    x ) and ( x.length > 0 )\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_fs_walk_lines_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.encoding\":                           ( x ) -> @isa_optional.nonempty_text x.encoding\n  \"@isa.positive_integer x.chunk_size\":                               ( x ) -> @isa.positive_integer x.chunk_size\n  \"@isa.buffer x.newline and ( Buffer.from '\\n' ).equals x.newline\":  \\\n    ( x ) -> ( @isa.buffer x.newline ) and ( Buffer.from '\\n' ).equals x.newline\n  # \"@isa.guy_buffer_chr x.newline\":                                    ( x ) -> @isa.guy_buffer_chr x.newline\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_walk_circular_lines_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa.boolean x.decode\":                                            ( x ) -> @isa.boolean x.decode\n  \"( x.loop_count is +Infinity ) or ( @isa.cardinal x.loop_count )\":  ( x ) -> ( x.loop_count is +Infinity ) or ( @isa.cardinal x.loop_count )\n  \"( x.line_count is +Infinity ) or ( @isa.cardinal x.line_count )\":  ( x ) -> ( x.line_count is +Infinity ) or ( @isa.cardinal x.line_count )\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_get_content_hash_cfg', tests:\n  \"@isa.object x\":                                                    ( x ) -> @isa.object x\n  \"@isa.cardinal x.length\":                                           ( x ) -> @isa.cardinal x.length\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  guy_fs_walk_lines_cfg:\n    encoding:       'utf-8'\n    newline:        Buffer.from '\\n'\n    chunk_size:     16 * 1024\n  guy_walk_circular_lines_cfg:\n    decode:         true\n    loop_count:     1\n    line_count:     +Infinity\n  guy_get_content_hash_cfg:\n    length:         17\n    fallback:       misfit\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines = ( path, cfg ) ->\n  H.types.validate.guy_fs_walk_lines_cfg ( cfg = { defaults.guy_fs_walk_lines_cfg..., cfg..., } )\n  H.types.validate.nonempty_text path\n  { chunk_size\n    newline\n    encoding }  = cfg\n  #.........................................................................................................\n  count         = 0\n  for line from @_walk_lines path, chunk_size\n    count++\n    yield if encoding? then line.toString encoding else line\n  yield ( if encoding? then '' else Buffer.from '' ) if count is 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_lines = ( path, chunk_size ) ->\n  FS            = require 'node:fs'\n  fd            = FS.openSync path\n  cache         = []\n  byte_idx      = 0\n  cr            = 0x0d\n  lf            = 0x0a\n  prv_was_cr    = false\n  is_lf         = false\n  is_cr         = false\n  #.........................................................................................................\n  flush = ->\n    yield cache[ 0 ]          if cache.length is 1\n    yield Buffer.concat cache if cache.length > 1\n    cache.length = 0\n    return null\n  #.........................................................................................................\n  walk_lines = ( buffer ) ->\n    loop\n      next_idx_cr = if ( next_idx_cr = buffer.indexOf cr ) is -1 then Infinity else next_idx_cr\n      next_idx_lf = if ( next_idx_lf = buffer.indexOf lf ) is -1 then Infinity else next_idx_lf\n      prv_was_cr  = is_cr\n      is_lf       = false\n      is_cr       = false\n      #.....................................................................................................\n      if next_idx_cr is Infinity\n        if next_idx_lf is Infinity\n          cache.push buffer\n          break\n        next_idx  = next_idx_lf\n        is_lf     = true\n        is_cr     = false\n      else\n        if ( next_idx_lf is Infinity ) or ( next_idx_cr < next_idx_lf )\n          next_idx  = next_idx_cr\n          is_lf     = false\n          is_cr     = true\n        else\n          next_idx  = next_idx_lf\n          is_lf     = true\n          is_cr     = false\n      #.....................................................................................................\n      cache.push buffer.subarray 0, next_idx\n      yield from flush()\n      buffer = buffer.subarray next_idx + 1 # i.e. nl_length\n    return null\n  #.........................................................................................................\n  loop\n    buffer      = Buffer.alloc chunk_size\n    byte_count  = FS.readSync fd, buffer, 0, chunk_size, byte_idx\n    break if byte_count is 0\n    byte_idx   += byte_count\n    buffer      = buffer.subarray 0, byte_count if byte_count < chunk_size\n    yield from walk_lines buffer\n  #.........................................................................................................\n  yield from flush()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_circular_lines = ( path, cfg ) ->\n  H.types.validate.guy_walk_circular_lines_cfg ( cfg = { defaults.guy_walk_circular_lines_cfg..., cfg..., } )\n  return if ( cfg.line_count is 0 ) or ( cfg.loop_count is 0 )\n  line_count = 0\n  loop_count = 0\n  loop\n    for line from @walk_lines path, { decode: cfg.decode, }\n      yield line\n      line_count++; return null if line_count >= cfg.line_count\n    loop_count++; return null if loop_count >= cfg.loop_count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_file_size = ( path, fallback = misfit ) ->\n  H.types.validate.nonempty_text path\n  try return ( ( require 'fs' ).statSync path ).size catch error\n    throw error if ( fallback is misfit )\n    throw error if ( error.code isnt 'ENOENT' )\n  return fallback\n\n#-----------------------------------------------------------------------------------------------------------\n@get_content_hash = ( path, cfg ) ->\n  H.types.validate.nonempty_text path\n  H.types.validate.guy_get_content_hash_cfg ( cfg = { defaults.guy_get_content_hash_cfg..., cfg..., } )\n  CP        = require 'child_process'\n  command   = if platform is 'linux' then 'sha1sum' else 'shasum'\n  result    = CP.spawnSync command, [ '-b', path, ]\n  if result.status isnt 0\n    return cfg.fallback unless cfg.fallback is misfit\n    if result.stderr?\n      throw new Error \"^guy.fs.get_content_hash@1^ \" + result.stderr.toString 'utf-8'\n    else\n      throw new Error \"^guy.fs.get_content_hash@1^ \" + ( require 'util' ).inspect result.error\n  R = result\n  R = R.stdout.toString 'utf-8'\n  R = R.replace /\\s.*$/, ''\n  R = R[ ... cfg.length ]\n  unless R.length is cfg.length\n    throw new Error \"^guy.fs.get_content_hash@1^ unable to generate hash of length #{cfg.length} using #{command}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@rename_sync = ( from_path, to_path ) ->\n  ### Same as `FS.renameSync()`, but falls back to `FS.copyFileSync()`, `FS.unlinkSync()` in case device\n  boundaries are crossed. Thx to https://github.com/sindresorhus/move-file/blob/main/index.js ###\n  FS = require 'node:fs'\n  try FS.renameSync from_path, to_path catch error\n    throw error unless error.code is 'EXDEV'\n    FS.copyFileSync from_path, to_path\n    FS.unlinkSync from_path\n  return null\n\n\n\n\n\n\n"
  ]
}