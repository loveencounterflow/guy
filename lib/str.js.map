{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/str.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA;;;EAGA,CAAA,GAA4B,OAAA,CAAQ,YAAR,EAH5B;;;;;;;;;;;;;;;;;;;EAwBA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,IAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,qBAAb,EAAoC,MAApC;EAAZ,EAxBpB;;;EA2BA,IAAC,CAAA,UAAD,GAAc,SAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AACd,QAAA,CAAA,EAAA,aAAA,EAAA,KAAA,EAAA,OAAA;;;;;IAIE,OAAA,GAAgB;IAChB,aAAA,GAAgB,IAAI,CAAC,MAAL,GAAc;AAC9B,WAAA,IAAA;MACE,IAAS,OAAO,CAAC,SAAR,GAAoB,aAA7B;AAAA,cAAA;;MACA,IAAO,qCAAP;QACE,KAAA,CAAM,QAAN,EAAgB,IAAI,yBAApB;AACA,cAFF;;MAGA,MAAM,KAAK,CAAE,CAAF;IALb;IAMA,CAAA,GAAI,UAAA,CAAA;IACJ,CAAC,CAAC,KAAF,GAAU,QAAA,CAAA,CAAA;aAAG,OAAO,CAAC,SAAR,GAAoB;IAAvB;AACV,WAAO;EAfK,EA3Bd;;;;;EA+CA,IAAC,CAAA,GAAD,GAAO,QAAA,CAAE,KAAF,EAAA,GAAS,WAAT,CAAA;AACP,QAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAE,CAAA,GAAI,KAAK,CAAE,CAAF;IACT,KAAA,yDAAA;;MACE,CAAA,IAAK,UAAU,CAAC,QAAX,CAAA,CAAA,GAAwB,KAAK,CAAE,GAAA,GAAM,CAAR;IADpC;AAEA,WAAO;EAJF;AA/CP",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './_helpers'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# H.types.declare 'guy_str_walk_lines_cfg', tests:\n#   \"@isa.object x\":                                                    ( x ) -> @isa.object x\n#   \"@isa_optional.nonempty_text x.encoding\":                           ( x ) -> @isa_optional.nonempty_text x.encoding\n#   \"@isa.positive_integer x.chunk_size\":                               ( x ) -> @isa.positive_integer x.chunk_size\n#   \"@isa.buffer x.newline and ( Buffer.from '\\n' ).equals x.newline\":  \\\n#     ( x ) -> ( @isa.buffer x.newline ) and ( Buffer.from '\\n' ).equals x.newline\n#   # \"@isa.guy_buffer_chr x.newline\":                                    ( x ) -> @isa.guy_buffer_chr x.newline\n\n# #-----------------------------------------------------------------------------------------------------------\n# defaults =\n#   guy_str_walk_lines_cfg:\n#     newline:        '\\n'\n\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/6969486/7568091 and\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping ###\n@escape_for_regex = ( text ) -> text.replace /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines = ( text, cfg ) ->\n  # H.types.validate.guy_str_walk_lines_cfg ( cfg = { defaults.guy_str_walk_lines_cfg..., cfg..., } )\n  # H.types.validate.nonempty_text path\n  # { newline   } = cfg\n  #.........................................................................................................\n  pattern       = /.*?(\\n|$)/suy\n  last_position = text.length - 1\n  loop\n    break if pattern.lastIndex > last_position\n    unless ( match = text.match pattern )?\n      debug '^3234^', text[ pattern.lastIndex .. ]\n      break\n    yield match[ 0 ]\n  R = walk_lines()\n  R.reset = -> pattern.lastIndex = 0\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@SQL = ( parts, expressions... ) ->\n  R = parts[ 0 ]\n  for expression, idx in expressions\n    R += expression.toString() + parts[ idx + 1 ]\n  return R\n\n\n\n\n\n\n\n\n"
  ]
}