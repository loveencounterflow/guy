{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/str.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA,EAAA,QAAA;;;EAGA,CAAA,GAA4B,OAAA,CAAQ,YAAR,EAH5B;;;EAOA,CAAC,CAAC,KAAK,CAAC,OAAR,CAAgB,wBAAhB,EAA0C;IAAA,KAAA,EACxC;MAAA,eAAA,EAA0B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA1B;MACA,qBAAA,EAA0B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,IAAf;MAAT;IAD1B;EADwC,CAA1C,EAPA;;;EAYA,QAAA,GACE;IAAA,sBAAA,EACE;MAAA,IAAA,EAAM;IAAN;EADF,EAbF;;;;;EAoBA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,IAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,qBAAb,EAAoC,MAApC;EAAZ,EApBpB;;;;EAwBA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,IAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,eAAb,EAA8B,MAA9B;EAAZ,EAxB1B;;;EA2BA,IAAC,CAAA,UAAD,GAAc,SAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AACd,QAAA,CAAA,EAAA,aAAA,EAAA,KAAA,EAAA,OAAA,EAAA;IAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,sBAAjB,CAAwC,CAAE,GAAA,GAAM,CAAE,GAAA,QAAQ,CAAC,sBAAX,EAAsC,GAAA,GAAtC,CAAR,CAAxC;IACA,CAAA,CAAE,IAAF,CAAA,GAAW,GAAX,EADF;;;IAIE,IAAG,IAAA,KAAQ,EAAX;MACE,MAAM;AACN,aAAO,KAFT;;IAGA,OAAA,GAAgB;IAChB,aAAA,GAAgB,IAAI,CAAC,MAAL,GAAc;AAC9B,WAAA,IAAA;MACE,IAAS,OAAO,CAAC,SAAR,GAAoB,aAA7B;AAAA,cAAA;;MACA,IAAa,qCAAb;AAAA,cAAA;;MACA,MAAM,CAAG,IAAH,GAAa,KAAK,CAAE,CAAF,CAAK,CAAC,OAAX,CAAA,CAAb,GAAuC,KAAK,CAAE,CAAF,CAA5C;IAHR;IAIA,IAAY,2BAAZ;MAAA,MAAM,GAAN;;IACA,CAAA,GAAI,IAAC,CAAA,UAAD,CAAA;IACJ,CAAC,CAAC,KAAF,GAAU,QAAA,CAAA,CAAA;aAAG,OAAO,CAAC,SAAR,GAAoB;IAAvB;AACV,WAAO;EAjBK,EA3Bd;;;;;EAiDA,IAAC,CAAA,GAAD,GAAO,QAAA,CAAE,KAAF,EAAA,GAAS,WAAT,CAAA;AACP,QAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAE,CAAA,GAAI,KAAK,CAAE,CAAF;IACT,KAAA,yDAAA;;MACE,CAAA,IAAK,UAAU,CAAC,QAAX,CAAA,CAAA,GAAwB,KAAK,CAAE,GAAA,GAAM,CAAR;IADpC;AAEA,WAAO;EAJF;AAjDP",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './_helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_str_walk_lines_cfg', tests:\n  \"@isa.object x\":          ( x ) -> @isa.object x\n  \"@isa.boolean x.trim\":    ( x ) -> @isa.boolean x.trim\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  guy_str_walk_lines_cfg:\n    trim: true\n\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/6969486/7568091 and\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping ###\n@escape_for_regex = ( text ) -> text.replace /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n\n#---------------------------------------------------------------------------------------------------------\n### thx to https://www.designcise.com/web/tutorial/which-characters-need-to-be-escaped-in-a-regular-expression-class ###\n@escape_for_regex_class = ( text ) -> text.replace /([\\^\\-\\]\\/])/g, '\\\\$1'\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines = ( text, cfg ) ->\n  H.types.validate.guy_str_walk_lines_cfg ( cfg = { defaults.guy_str_walk_lines_cfg..., cfg..., } )\n  { trim } = cfg\n  #.........................................................................................................\n  # pattern       = /.*?(\\n|$)/suy\n  if text is ''\n    yield ''\n    return null\n  pattern       = /(.*?)(?:\\r\\n|\\r|\\n|$)/suy\n  last_position = text.length - 1\n  loop\n    break if pattern.lastIndex > last_position\n    break unless ( match = text.match pattern )?\n    yield if trim then match[ 1 ].trimEnd() else match[ 1 ]\n  yield '' if ( text.match /\\n$/ )?\n  R = @walk_lines()\n  R.reset = -> pattern.lastIndex = 0\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@SQL = ( parts, expressions... ) ->\n  R = parts[ 0 ]\n  for expression, idx in expressions\n    R += expression.toString() + parts[ idx + 1 ]\n  return R\n\n\n\n\n\n\n\n\n"
  ]
}