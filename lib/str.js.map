{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/str.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nH                         = require './_helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\nH.types.declare 'guy_str_walk_lines_cfg', tests:\n  \"@isa.object x\":          ( x ) -> @isa.object x\n  \"@isa.boolean x.trim\":    ( x ) -> @isa.boolean x.trim\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  guy_str_walk_lines_cfg:\n    trim: true\n\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/6969486/7568091 and\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping ###\n@escape_for_regex = ( text ) -> text.replace /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n\n#---------------------------------------------------------------------------------------------------------\n### thx to https://www.designcise.com/web/tutorial/which-characters-need-to-be-escaped-in-a-regular-expression-class ###\n@escape_for_regex_class = ( text ) -> text.replace /([\\^\\-\\]\\/])/g, '\\\\$1'\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines = ( text, cfg ) -> yield line for { line, } from @walk_lines_with_positions text, cfg\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines_with_positions = ( text, cfg ) ->\n  H.types.validate.guy_str_walk_lines_cfg ( cfg = { defaults.guy_str_walk_lines_cfg..., cfg..., } )\n  { trim }  = cfg\n  #.........................................................................................................\n  if text is ''\n    yield { lnr: 1, line: '', eol: '', }\n    return null\n  #.........................................................................................................\n  lnr           = 0\n  pattern       = /(.*?)(\\r\\n|\\r|\\n|$)/suy\n  last_position = text.length - 1\n  #.........................................................................................................\n  loop\n    idx = pattern.lastIndex\n    break if pattern.lastIndex > last_position\n    break unless ( match = text.match pattern )?\n    [ linenl, line, eol, ] = match\n    lnr++\n    if trim\n      line  = match[ 1 ].trimEnd()\n      yield { lnr, line, eol, }\n    else\n      line  = match[ 1 ]\n      yield { lnr, line, eol, }\n  #.........................................................................................................\n  if ( text.match /(\\r|\\n)$/ )?\n    lnr++\n    yield { lnr, line: '', eol: '', }\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@SQL = ( parts, expressions... ) ->\n  R = parts[ 0 ]\n  for expression, idx in expressions\n    R += expression.toString() + parts[ idx + 1 ]\n  return R\n\n\n\n\n\n\n\n\n"
  ]
}